// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for EntityType.
const (
	EntityTypeFilament EntityType = "filament"
	EntityTypeSpool    EntityType = "spool"
	EntityTypeVendor   EntityType = "vendor"
)

// Defines values for EventType.
const (
	Added   EventType = "added"
	Deleted EventType = "deleted"
	Updated EventType = "updated"
)

// Defines values for ExportFormat.
const (
	Csv  ExportFormat = "csv"
	Json ExportFormat = "json"
)

// Defines values for ExtraFieldType.
const (
	ExtraFieldTypeBoolean      ExtraFieldType = "boolean"
	ExtraFieldTypeChoice       ExtraFieldType = "choice"
	ExtraFieldTypeDatetime     ExtraFieldType = "datetime"
	ExtraFieldTypeFloat        ExtraFieldType = "float"
	ExtraFieldTypeFloatRange   ExtraFieldType = "float_range"
	ExtraFieldTypeInteger      ExtraFieldType = "integer"
	ExtraFieldTypeIntegerRange ExtraFieldType = "integer_range"
	ExtraFieldTypeText         ExtraFieldType = "text"
)

// Defines values for Finish.
const (
	Glossy Finish = "glossy"
	Matte  Finish = "matte"
)

// Defines values for MultiColorDirectionInput.
const (
	MultiColorDirectionInputCoaxial      MultiColorDirectionInput = "coaxial"
	MultiColorDirectionInputLongitudinal MultiColorDirectionInput = "longitudinal"
)

// Defines values for Pattern.
const (
	Marble  Pattern = "marble"
	Sparkle Pattern = "sparkle"
)

// Defines values for SettingType.
const (
	SettingTypeArray   SettingType = "array"
	SettingTypeBoolean SettingType = "boolean"
	SettingTypeNumber  SettingType = "number"
	SettingTypeObject  SettingType = "object"
	SettingTypeString  SettingType = "string"
)

// Defines values for SpoolType.
const (
	Cardboard SpoolType = "cardboard"
	Metal     SpoolType = "metal"
	Plastic   SpoolType = "plastic"
)

// Defines values for SpoolmanApiV1ModelsMultiColorDirection.
const (
	SpoolmanApiV1ModelsMultiColorDirectionCoaxial      SpoolmanApiV1ModelsMultiColorDirection = "coaxial"
	SpoolmanApiV1ModelsMultiColorDirectionLongitudinal SpoolmanApiV1ModelsMultiColorDirection = "longitudinal"
)

// Defines values for SpoolmanExternaldbMultiColorDirection.
const (
	Coaxial      SpoolmanExternaldbMultiColorDirection = "coaxial"
	Longitudinal SpoolmanExternaldbMultiColorDirection = "longitudinal"
)

// BackupResponse defines model for BackupResponse.
type BackupResponse struct {
	// Path Path to the created backup file.
	Path *string `json:"path,omitempty"`
}

// EntityType defines model for EntityType.
type EntityType string

// EventType Event types.
type EventType string

// ExportFormat defines model for ExportFormat.
type ExportFormat string

// ExternalFilament defines model for ExternalFilament.
type ExternalFilament struct {
	// BedTemp Bed temperature in °C.
	BedTemp *int `json:"bed_temp"`

	// ColorHex Filament color code in hex format, for single-color filaments.
	ColorHex *string `json:"color_hex"`

	// ColorHexes For multi-color filaments. List of hex color codes in hex format.
	ColorHexes *[]string `json:"color_hexes"`

	// Density Density in g/cm3.
	Density float32 `json:"density"`

	// Diameter Filament in mm.
	Diameter float32 `json:"diameter"`

	// ExtruderTemp Extruder/nozzle temperature in °C.
	ExtruderTemp *int    `json:"extruder_temp"`
	Finish       *Finish `json:"finish,omitempty"`

	// Glow Whether the filament is glow-in-the-dark.
	Glow *bool `json:"glow,omitempty"`

	// Id A unique ID for this filament.
	Id string `json:"id"`

	// Manufacturer Filament manufacturer.
	Manufacturer string `json:"manufacturer"`

	// Material Filament material.
	Material            string                                 `json:"material"`
	MultiColorDirection *SpoolmanExternaldbMultiColorDirection `json:"multi_color_direction,omitempty"`

	// Name Filament name.
	Name      string     `json:"name"`
	Pattern   *Pattern   `json:"pattern,omitempty"`
	SpoolType *SpoolType `json:"spool_type,omitempty"`

	// SpoolWeight Weight of an empty spool.
	SpoolWeight *float32 `json:"spool_weight"`

	// Translucent Whether the filament is translucent.
	Translucent *bool `json:"translucent,omitempty"`

	// Weight Net weight of a single spool.
	Weight float32 `json:"weight"`
}

// ExternalMaterial defines model for ExternalMaterial.
type ExternalMaterial struct {
	// BedTemp Bed temperature in °C.
	BedTemp *int    `json:"bed_temp"`
	Density float32 `json:"density"`

	// ExtruderTemp Extruder/nozzle temperature in °C.
	ExtruderTemp *int   `json:"extruder_temp"`
	Material     string `json:"material"`
}

// ExtraField defines model for ExtraField.
type ExtraField struct {
	// Choices Choices for the field, only for field type choice
	Choices *[]string `json:"choices"`

	// DefaultValue Default value of the field
	DefaultValue *string        `json:"default_value"`
	EntityType   EntityType     `json:"entity_type"`
	FieldType    ExtraFieldType `json:"field_type"`

	// Key Unique key
	Key string `json:"key"`

	// MultiChoice Whether multiple choices can be selected
	MultiChoice *bool `json:"multi_choice"`

	// Name Nice name
	Name string `json:"name"`

	// Order Order of the field
	Order *int `json:"order,omitempty"`

	// Unit Unit of the value
	Unit *string `json:"unit"`
}

// ExtraFieldParameters defines model for ExtraFieldParameters.
type ExtraFieldParameters struct {
	// Choices Choices for the field, only for field type choice
	Choices *[]string `json:"choices"`

	// DefaultValue Default value of the field
	DefaultValue *string        `json:"default_value"`
	FieldType    ExtraFieldType `json:"field_type"`

	// MultiChoice Whether multiple choices can be selected
	MultiChoice *bool `json:"multi_choice"`

	// Name Nice name
	Name string `json:"name"`

	// Order Order of the field
	Order *int `json:"order,omitempty"`

	// Unit Unit of the value
	Unit *string `json:"unit"`
}

// ExtraFieldType defines model for ExtraFieldType.
type ExtraFieldType string

// Filament defines model for Filament.
type Filament struct {
	// ArticleNumber Vendor article number, e.g. EAN, QR code, etc.
	ArticleNumber *string `json:"article_number"`

	// ColorHex Hexadecimal color code of the filament, e.g. FF0000 for red. Supports alpha channel at the end. If it's a multi-color filament, the multi_color_hexes field is used instead.
	ColorHex *string `json:"color_hex"`

	// Comment Free text comment about this filament type.
	Comment *string `json:"comment"`

	// Density The density of this filament in g/cm3.
	Density float32 `json:"density"`

	// Diameter The diameter of this filament in mm.
	Diameter float32 `json:"diameter"`

	// ExternalId Set if this filament comes from an external database. This contains the ID in the external database.
	ExternalId *string `json:"external_id"`

	// Extra Extra fields for this filament. All values are JSON-encoded data. Query the /fields endpoint for more details about the fields.
	Extra map[string]string `json:"extra"`

	// Id Unique internal ID of this filament type.
	Id int `json:"id"`

	// Material The material of this filament, e.g. PLA.
	Material *string `json:"material"`

	// MultiColorDirection Enum for multi-color direction.
	MultiColorDirection *SpoolmanApiV1ModelsMultiColorDirection `json:"multi_color_direction,omitempty"`

	// MultiColorHexes Hexadecimal color code of the filament, e.g. FF0000 for red. Supports alpha channel at the end. Specifying multiple colors separated by commas. Also set the multi_color_direction field if you specify multiple colors.
	MultiColorHexes *string `json:"multi_color_hexes"`

	// Name Filament name, to distinguish this filament type among others from the same vendor.Should contain its color for example.
	Name *string `json:"name"`

	// Price The price of this filament in the system configured currency.
	Price *float32 `json:"price"`

	// Registered When the filament was registered in the database. UTC Timezone.
	Registered string `json:"registered"`

	// SettingsBedTemp Overridden bed temperature, in °C.
	SettingsBedTemp *int `json:"settings_bed_temp"`

	// SettingsExtruderTemp Overridden extruder temperature, in °C.
	SettingsExtruderTemp *int `json:"settings_extruder_temp"`

	// SpoolWeight The empty spool weight, in grams.
	SpoolWeight *float32 `json:"spool_weight"`
	Vendor      *Vendor  `json:"vendor,omitempty"`

	// Weight The weight of the filament in a full spool, in grams.
	Weight *float32 `json:"weight"`
}

// FilamentEvent Event.
type FilamentEvent struct {
	// Date When the event occured. UTC Timezone.
	Date    string   `json:"date"`
	Payload Filament `json:"payload"`

	// Resource Resource type.
	Resource string `json:"resource"`

	// Type Event types.
	Type EventType `json:"type"`
}

// FilamentParameters defines model for FilamentParameters.
type FilamentParameters struct {
	// ArticleNumber Vendor article number, e.g. EAN, QR code, etc.
	ArticleNumber *string `json:"article_number"`

	// ColorHex Hexadecimal color code of the filament, e.g. FF0000 for red. Supports alpha channel at the end. If it's a multi-color filament, the multi_color_hexes field is used instead.
	ColorHex *string `json:"color_hex"`

	// Comment Free text comment about this filament type.
	Comment *string `json:"comment"`

	// Density The density of this filament in g/cm3.
	Density float32 `json:"density"`

	// Diameter The diameter of this filament in mm.
	Diameter float32 `json:"diameter"`

	// ExternalId Set if this filament comes from an external database. This contains the ID in the external database.
	ExternalId *string `json:"external_id"`

	// Extra Extra fields for this filament.
	Extra *map[string]string `json:"extra"`

	// Material The material of this filament, e.g. PLA.
	Material *string `json:"material"`

	// MultiColorDirection Enum for multi-color direction.
	MultiColorDirection *MultiColorDirectionInput `json:"multi_color_direction,omitempty"`

	// MultiColorHexes Hexadecimal color code of the filament, e.g. FF0000 for red. Supports alpha channel at the end. Specifying multiple colors separated by commas. Also set the multi_color_direction field if you specify multiple colors.
	MultiColorHexes *string `json:"multi_color_hexes"`

	// Name Filament name, to distinguish this filament type among others from the same vendor.Should contain its color for example.
	Name *string `json:"name"`

	// Price The price of this filament in the system configured currency.
	Price *float32 `json:"price"`

	// SettingsBedTemp Overridden bed temperature, in °C.
	SettingsBedTemp *int `json:"settings_bed_temp"`

	// SettingsExtruderTemp Overridden extruder temperature, in °C.
	SettingsExtruderTemp *int `json:"settings_extruder_temp"`

	// SpoolWeight The empty spool weight, in grams.
	SpoolWeight *float32 `json:"spool_weight"`

	// VendorId The ID of the vendor of this filament type.
	VendorId *int `json:"vendor_id"`

	// Weight The weight of the filament in a full spool, in grams. (net weight)
	Weight *float32 `json:"weight"`
}

// FilamentUpdateParameters defines model for FilamentUpdateParameters.
type FilamentUpdateParameters struct {
	// ArticleNumber Vendor article number, e.g. EAN, QR code, etc.
	ArticleNumber *string `json:"article_number"`

	// ColorHex Hexadecimal color code of the filament, e.g. FF0000 for red. Supports alpha channel at the end. If it's a multi-color filament, the multi_color_hexes field is used instead.
	ColorHex *string `json:"color_hex"`

	// Comment Free text comment about this filament type.
	Comment *string `json:"comment"`

	// Density The density of this filament in g/cm3.
	Density *float32 `json:"density"`

	// Diameter The diameter of this filament in mm.
	Diameter *float32 `json:"diameter"`

	// ExternalId Set if this filament comes from an external database. This contains the ID in the external database.
	ExternalId *string `json:"external_id"`

	// Extra Extra fields for this filament.
	Extra *map[string]string `json:"extra"`

	// Material The material of this filament, e.g. PLA.
	Material *string `json:"material"`

	// MultiColorDirection Enum for multi-color direction.
	MultiColorDirection *MultiColorDirectionInput `json:"multi_color_direction,omitempty"`

	// MultiColorHexes Hexadecimal color code of the filament, e.g. FF0000 for red. Supports alpha channel at the end. Specifying multiple colors separated by commas. Also set the multi_color_direction field if you specify multiple colors.
	MultiColorHexes *string `json:"multi_color_hexes"`

	// Name Filament name, to distinguish this filament type among others from the same vendor.Should contain its color for example.
	Name *string `json:"name"`

	// Price The price of this filament in the system configured currency.
	Price *float32 `json:"price"`

	// SettingsBedTemp Overridden bed temperature, in °C.
	SettingsBedTemp *int `json:"settings_bed_temp"`

	// SettingsExtruderTemp Overridden extruder temperature, in °C.
	SettingsExtruderTemp *int `json:"settings_extruder_temp"`

	// SpoolWeight The empty spool weight, in grams.
	SpoolWeight *float32 `json:"spool_weight"`

	// VendorId The ID of the vendor of this filament type.
	VendorId *int `json:"vendor_id"`

	// Weight The weight of the filament in a full spool, in grams. (net weight)
	Weight *float32 `json:"weight"`
}

// Finish defines model for Finish.
type Finish string

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// HealthCheck defines model for HealthCheck.
type HealthCheck struct {
	Status string `json:"status"`
}

// Info defines model for Info.
type Info struct {
	AutomaticBackups bool    `json:"automatic_backups"`
	BackupsDir       string  `json:"backups_dir"`
	BuildDate        *string `json:"build_date"`
	DataDir          string  `json:"data_dir"`
	DbType           string  `json:"db_type"`
	DebugMode        bool    `json:"debug_mode"`
	GitCommit        *string `json:"git_commit"`
	LogsDir          string  `json:"logs_dir"`
	Version          string  `json:"version"`
}

// Message defines model for Message.
type Message struct {
	Message string `json:"message"`
}

// MultiColorDirectionInput Enum for multi-color direction.
type MultiColorDirectionInput string

// Pattern defines model for Pattern.
type Pattern string

// RenameLocationBody defines model for RenameLocationBody.
type RenameLocationBody struct {
	// Name The new name of the location.
	Name string `json:"name"`
}

// RootModelStr defines model for RootModel_str_.
type RootModelStr = string

// SettingEvent Event.
type SettingEvent struct {
	// Date When the event occured. UTC Timezone.
	Date    string    `json:"date"`
	Payload SettingKV `json:"payload"`

	// Resource Resource type.
	Resource string `json:"resource"`

	// Type Event types.
	Type EventType `json:"type"`
}

// SettingKV defines model for SettingKV.
type SettingKV struct {
	// Key Setting key.
	Key     string          `json:"key"`
	Setting SettingResponse `json:"setting"`
}

// SettingResponse defines model for SettingResponse.
type SettingResponse struct {
	// IsSet Whether the setting has been set. If false, 'value' contains the default value.
	IsSet bool `json:"is_set"`

	// Type The type of a setting.
	Type SettingType `json:"type"`

	// Value Setting value.
	Value string `json:"value"`
}

// SettingType The type of a setting.
type SettingType string

// Spool defines model for Spool.
type Spool struct {
	// Archived Whether this spool is archived and should not be used anymore.
	Archived bool `json:"archived"`

	// Comment Free text comment about this specific spool.
	Comment *string `json:"comment"`

	// Extra Extra fields for this spool. All values are JSON-encoded data. Query the /fields endpoint for more details about the fields.
	Extra    map[string]string `json:"extra"`
	Filament Filament          `json:"filament"`

	// FirstUsed First logged occurence of spool usage. UTC Timezone.
	FirstUsed *string `json:"first_used"`

	// Id Unique internal ID of this spool of filament.
	Id int `json:"id"`

	// InitialWeight The initial weight, in grams, of the filament on the spool (net weight).
	InitialWeight *float32 `json:"initial_weight"`

	// LastUsed Last logged occurence of spool usage. UTC Timezone.
	LastUsed *string `json:"last_used"`

	// Location Where this spool can be found.
	Location *string `json:"location"`

	// LotNr Vendor manufacturing lot/batch number of the spool.
	LotNr *string `json:"lot_nr"`

	// Price The price of this spool in the system configured currency.
	Price *float32 `json:"price"`

	// Registered When the spool was registered in the database. UTC Timezone.
	Registered string `json:"registered"`

	// RemainingLength Estimated remaining length of filament on the spool in millimeters. Only set if the filament type has a weight set.
	RemainingLength *float32 `json:"remaining_length"`

	// RemainingWeight Estimated remaining weight of filament on the spool in grams. Only set if the filament type has a weight set.
	RemainingWeight *float32 `json:"remaining_weight"`

	// SpoolWeight Weight of an empty spool (tare weight).
	SpoolWeight *float32 `json:"spool_weight"`

	// UsedLength Consumed length of filament from the spool in millimeters.
	UsedLength float32 `json:"used_length"`

	// UsedWeight Consumed weight of filament from the spool in grams.
	UsedWeight float32 `json:"used_weight"`
}

// SpoolEvent Event.
type SpoolEvent struct {
	// Date When the event occured. UTC Timezone.
	Date    string `json:"date"`
	Payload Spool  `json:"payload"`

	// Resource Resource type.
	Resource string `json:"resource"`

	// Type Event types.
	Type EventType `json:"type"`
}

// SpoolMeasureParameters defines model for SpoolMeasureParameters.
type SpoolMeasureParameters struct {
	// Weight Current gross weight of the spool, in g.
	Weight float32 `json:"weight"`
}

// SpoolParameters defines model for SpoolParameters.
type SpoolParameters struct {
	// Archived Whether this spool is archived and should not be used anymore.
	Archived *bool `json:"archived,omitempty"`

	// Comment Free text comment about this specific spool.
	Comment *string `json:"comment"`

	// Extra Extra fields for this spool.
	Extra *map[string]string `json:"extra"`

	// FilamentId The ID of the filament type of this spool.
	FilamentId int `json:"filament_id"`

	// FirstUsed First logged occurence of spool usage.
	FirstUsed *time.Time `json:"first_used"`

	// InitialWeight The initial weight of the filament on the spool, in grams. (net weight)
	InitialWeight *float32 `json:"initial_weight"`

	// LastUsed Last logged occurence of spool usage.
	LastUsed *time.Time `json:"last_used"`

	// Location Where this spool can be found.
	Location *string `json:"location"`

	// LotNr Vendor manufacturing lot/batch number of the spool.
	LotNr *string `json:"lot_nr"`

	// Price The price of this filament in the system configured currency.
	Price *float32 `json:"price"`

	// RemainingWeight Remaining weight of filament on the spool. Can only be used if the filament type has a weight set.
	RemainingWeight *float32 `json:"remaining_weight"`

	// SpoolWeight The weight of an empty spool, in grams. (tare weight)
	SpoolWeight *float32 `json:"spool_weight"`

	// UsedWeight Used weight of filament on the spool.
	UsedWeight *float32 `json:"used_weight"`
}

// SpoolType defines model for SpoolType.
type SpoolType string

// SpoolUpdateParameters defines model for SpoolUpdateParameters.
type SpoolUpdateParameters struct {
	// Archived Whether this spool is archived and should not be used anymore.
	Archived *bool `json:"archived,omitempty"`

	// Comment Free text comment about this specific spool.
	Comment *string `json:"comment"`

	// Extra Extra fields for this spool.
	Extra *map[string]string `json:"extra"`

	// FilamentId The ID of the filament type of this spool.
	FilamentId *int `json:"filament_id"`

	// FirstUsed First logged occurence of spool usage.
	FirstUsed *time.Time `json:"first_used"`

	// InitialWeight The initial weight of the filament on the spool, in grams. (net weight)
	InitialWeight *float32 `json:"initial_weight"`

	// LastUsed Last logged occurence of spool usage.
	LastUsed *time.Time `json:"last_used"`

	// Location Where this spool can be found.
	Location *string `json:"location"`

	// LotNr Vendor manufacturing lot/batch number of the spool.
	LotNr *string `json:"lot_nr"`

	// Price The price of this filament in the system configured currency.
	Price *float32 `json:"price"`

	// RemainingWeight Remaining weight of filament on the spool. Can only be used if the filament type has a weight set.
	RemainingWeight *float32 `json:"remaining_weight"`

	// SpoolWeight The weight of an empty spool, in grams. (tare weight)
	SpoolWeight *float32 `json:"spool_weight"`

	// UsedWeight Used weight of filament on the spool.
	UsedWeight *float32 `json:"used_weight"`
}

// SpoolUseParameters defines model for SpoolUseParameters.
type SpoolUseParameters struct {
	// UseLength Length of filament to reduce by, in mm.
	UseLength *float32 `json:"use_length"`

	// UseWeight Filament weight to reduce by, in g.
	UseWeight *float32 `json:"use_weight"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// Vendor defines model for Vendor.
type Vendor struct {
	// Comment Free text comment about this vendor.
	Comment *string `json:"comment"`

	// EmptySpoolWeight The empty spool weight, in grams.
	EmptySpoolWeight *float32 `json:"empty_spool_weight"`

	// ExternalId Set if this vendor comes from an external database. This contains the ID in the external database.
	ExternalId *string `json:"external_id"`

	// Extra Extra fields for this vendor. All values are JSON-encoded data. Query the /fields endpoint for more details about the fields.
	Extra map[string]string `json:"extra"`

	// Id Unique internal ID of this vendor.
	Id int `json:"id"`

	// Name Vendor name.
	Name string `json:"name"`

	// Registered When the vendor was registered in the database. UTC Timezone.
	Registered string `json:"registered"`
}

// VendorEvent Event.
type VendorEvent struct {
	// Date When the event occured. UTC Timezone.
	Date    string `json:"date"`
	Payload Vendor `json:"payload"`

	// Resource Resource type.
	Resource string `json:"resource"`

	// Type Event types.
	Type EventType `json:"type"`
}

// VendorParameters defines model for VendorParameters.
type VendorParameters struct {
	// Comment Free text comment about this vendor.
	Comment *string `json:"comment"`

	// EmptySpoolWeight The weight of an empty spool, in grams.
	EmptySpoolWeight *float32 `json:"empty_spool_weight"`

	// ExternalId Set if this vendor comes from an external database. This contains the ID in the external database.
	ExternalId *string `json:"external_id"`

	// Extra Extra fields for this vendor.
	Extra *map[string]string `json:"extra"`

	// Name Vendor name.
	Name string `json:"name"`
}

// VendorUpdateParameters defines model for VendorUpdateParameters.
type VendorUpdateParameters struct {
	// Comment Free text comment about this vendor.
	Comment *string `json:"comment"`

	// EmptySpoolWeight The weight of an empty spool, in grams.
	EmptySpoolWeight *float32 `json:"empty_spool_weight"`

	// ExternalId Set if this vendor comes from an external database. This contains the ID in the external database.
	ExternalId *string `json:"external_id"`

	// Extra Extra fields for this vendor.
	Extra *map[string]string `json:"extra"`

	// Name Vendor name.
	Name *string `json:"name"`
}

// SpoolmanApiV1ModelsMultiColorDirection Enum for multi-color direction.
type SpoolmanApiV1ModelsMultiColorDirection string

// SpoolmanExternaldbMultiColorDirection defines model for spoolman__externaldb__MultiColorDirection.
type SpoolmanExternaldbMultiColorDirection string

// ExportFilamentsExportFilamentsGetParams defines parameters for ExportFilamentsExportFilamentsGet.
type ExportFilamentsExportFilamentsGetParams struct {
	Fmt ExportFormat `form:"fmt" json:"fmt"`
}

// ExportSpoolsExportSpoolsGetParams defines parameters for ExportSpoolsExportSpoolsGet.
type ExportSpoolsExportSpoolsGetParams struct {
	Fmt ExportFormat `form:"fmt" json:"fmt"`
}

// ExportVendorsExportVendorsGetParams defines parameters for ExportVendorsExportVendorsGet.
type ExportVendorsExportVendorsGetParams struct {
	Fmt ExportFormat `form:"fmt" json:"fmt"`
}

// FindFilamentsFilamentGetParams defines parameters for FindFilamentsFilamentGet.
type FindFilamentsFilamentGetParams struct {
	// VendorName See vendor.name.
	VendorName *string `form:"vendor_name,omitempty" json:"vendor_name,omitempty"`

	// VendorId See vendor.id.
	VendorId *string `form:"vendor_id,omitempty" json:"vendor_id,omitempty"`

	// VendorDotName Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match filaments with no vendor name. Surround a term with quotes to search for the exact term.
	VendorDotName *string `form:"vendor_dot_name,omitempty" json:"vendor_dot_name,omitempty"`

	// VendorDotId Match an exact vendor ID. Separate multiple IDs with a comma. Specify -1 to match filaments with no vendor.
	VendorDotId *string `form:"vendor_dot_id,omitempty" json:"vendor_dot_id,omitempty"`

	// Name Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match filaments with no name. Surround a term with quotes to search for the exact term.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Material Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match filaments with no material. Surround a term with quotes to search for the exact term.
	Material *string `form:"material,omitempty" json:"material,omitempty"`

	// ArticleNumber Partial case-insensitive search term for the filament article number. Separate multiple terms with a comma. Specify an empty string to match filaments with no article number. Surround a term with quotes to search for the exact term.
	ArticleNumber *string `form:"article_number,omitempty" json:"article_number,omitempty"`

	// ColorHex Match filament by similar color. Slow operation!
	ColorHex *string `form:"color_hex,omitempty" json:"color_hex,omitempty"`

	// ColorSimilarityThreshold The similarity threshold for color matching. A value between 0.0-100.0, where 0 means match only exactly the same color.
	ColorSimilarityThreshold *float32 `form:"color_similarity_threshold,omitempty" json:"color_similarity_threshold,omitempty"`

	// ExternalId Find filaments imported by the given external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term.
	ExternalId *string `form:"external_id,omitempty" json:"external_id,omitempty"`

	// Sort Sort the results by the given field. Should be a comma-separate string with "field:direction" items.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Limit Maximum number of items in the response.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset in the full result set if a limit is set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// SetSettingSettingKeyPostJSONBody defines parameters for SetSettingSettingKeyPost.
type SetSettingSettingKeyPostJSONBody = string

// FindSpoolSpoolGetParams defines parameters for FindSpoolSpoolGet.
type FindSpoolSpoolGetParams struct {
	// FilamentName See filament.name.
	FilamentName *string `form:"filament_name,omitempty" json:"filament_name,omitempty"`

	// FilamentId See filament.id.
	FilamentId *string `form:"filament_id,omitempty" json:"filament_id,omitempty"`

	// FilamentMaterial See filament.material.
	FilamentMaterial *string `form:"filament_material,omitempty" json:"filament_material,omitempty"`

	// VendorName See filament.vendor.name.
	VendorName *string `form:"vendor_name,omitempty" json:"vendor_name,omitempty"`

	// VendorId See filament.vendor.id.
	VendorId *string `form:"vendor_id,omitempty" json:"vendor_id,omitempty"`

	// FilamentDotName Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match spools with no filament name. Surround a term with quotes to search for the exact term.
	FilamentDotName *string `form:"filament_dot_name,omitempty" json:"filament_dot_name,omitempty"`

	// FilamentDotId Match an exact filament ID. Separate multiple IDs with a comma.
	FilamentDotId *string `form:"filament_dot_id,omitempty" json:"filament_dot_id,omitempty"`

	// FilamentDotMaterial Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match spools with no filament material. Surround a term with quotes to search for the exact term.
	FilamentDotMaterial *string `form:"filament_dot_material,omitempty" json:"filament_dot_material,omitempty"`

	// FilamentDotVendorDotName Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match spools with no vendor name. Surround a term with quotes to search for the exact term.
	FilamentDotVendorDotName *string `form:"filament_dot_vendor_dot_name,omitempty" json:"filament_dot_vendor_dot_name,omitempty"`

	// FilamentDotVendorDotId Match an exact vendor ID. Separate multiple IDs with a comma. Set it to -1 to match spools with filaments with no vendor.
	FilamentDotVendorDotId *string `form:"filament_dot_vendor_dot_id,omitempty" json:"filament_dot_vendor_dot_id,omitempty"`

	// Location Partial case-insensitive search term for the spool location. Separate multiple terms with a comma. Specify an empty string to match spools with no location. Surround a term with quotes to search for the exact term.
	Location *string `form:"location,omitempty" json:"location,omitempty"`

	// LotNr Partial case-insensitive search term for the spool lot number. Separate multiple terms with a comma. Specify an empty string to match spools with no lot nr. Surround a term with quotes to search for the exact term.
	LotNr *string `form:"lot_nr,omitempty" json:"lot_nr,omitempty"`

	// AllowArchived Whether to include archived spools in the search results.
	AllowArchived *bool `form:"allow_archived,omitempty" json:"allow_archived,omitempty"`

	// Sort Sort the results by the given field. Should be a comma-separate string with "field:direction" items.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Limit Maximum number of items in the response.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset in the full result set if a limit is set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// FindVendorVendorGetParams defines parameters for FindVendorVendorGet.
type FindVendorVendorGetParams struct {
	// Name Partial case-insensitive search term for the vendor name. Separate multiple terms with a comma. Surround a term with quotes to search for the exact term.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// ExternalId Exact match for the vendor external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term.
	ExternalId *string `form:"external_id,omitempty" json:"external_id,omitempty"`

	// Sort Sort the results by the given field. Should be a comma-separate string with "field:direction" items.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Limit Maximum number of items in the response.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset in the full result set if a limit is set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// AddOrUpdateExtraFieldFieldEntityTypeKeyPostJSONRequestBody defines body for AddOrUpdateExtraFieldFieldEntityTypeKeyPost for application/json ContentType.
type AddOrUpdateExtraFieldFieldEntityTypeKeyPostJSONRequestBody = ExtraFieldParameters

// AddFilamentFilamentPostJSONRequestBody defines body for AddFilamentFilamentPost for application/json ContentType.
type AddFilamentFilamentPostJSONRequestBody = FilamentParameters

// UpdateFilamentFilamentFilamentIdPatchJSONRequestBody defines body for UpdateFilamentFilamentFilamentIdPatch for application/json ContentType.
type UpdateFilamentFilamentFilamentIdPatchJSONRequestBody = FilamentUpdateParameters

// RenameLocationLocationLocationPatchJSONRequestBody defines body for RenameLocationLocationLocationPatch for application/json ContentType.
type RenameLocationLocationLocationPatchJSONRequestBody = RenameLocationBody

// SetSettingSettingKeyPostJSONRequestBody defines body for SetSettingSettingKeyPost for application/json ContentType.
type SetSettingSettingKeyPostJSONRequestBody = SetSettingSettingKeyPostJSONBody

// AddSpoolSpoolPostJSONRequestBody defines body for AddSpoolSpoolPost for application/json ContentType.
type AddSpoolSpoolPostJSONRequestBody = SpoolParameters

// UpdateSpoolSpoolSpoolIdPatchJSONRequestBody defines body for UpdateSpoolSpoolSpoolIdPatch for application/json ContentType.
type UpdateSpoolSpoolSpoolIdPatchJSONRequestBody = SpoolUpdateParameters

// UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutJSONRequestBody defines body for UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut for application/json ContentType.
type UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutJSONRequestBody = SpoolMeasureParameters

// UseSpoolFilamentSpoolSpoolIdUsePutJSONRequestBody defines body for UseSpoolFilamentSpoolSpoolIdUsePut for application/json ContentType.
type UseSpoolFilamentSpoolSpoolIdUsePutJSONRequestBody = SpoolUseParameters

// AddVendorVendorPostJSONRequestBody defines body for AddVendorVendorPost for application/json ContentType.
type AddVendorVendorPostJSONRequestBody = VendorParameters

// UpdateVendorVendorVendorIdPatchJSONRequestBody defines body for UpdateVendorVendorVendorIdPatch for application/json ContentType.
type UpdateVendorVendorVendorIdPatchJSONRequestBody = VendorUpdateParameters

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find Article Numbers
	// (GET /article-number)
	FindArticleNumbersArticleNumberGet(w http.ResponseWriter, r *http.Request)
	// Backup
	// (POST /backup)
	BackupBackupPost(w http.ResponseWriter, r *http.Request)
	// Export Filaments
	// (GET /export/filaments)
	ExportFilamentsExportFilamentsGet(w http.ResponseWriter, r *http.Request, params ExportFilamentsExportFilamentsGetParams)
	// Export Spools
	// (GET /export/spools)
	ExportSpoolsExportSpoolsGet(w http.ResponseWriter, r *http.Request, params ExportSpoolsExportSpoolsGetParams)
	// Export Vendors
	// (GET /export/vendors)
	ExportVendorsExportVendorsGet(w http.ResponseWriter, r *http.Request, params ExportVendorsExportVendorsGetParams)
	// Get All External Filaments
	// (GET /external/filament)
	GetAllExternalFilamentsExternalFilamentGet(w http.ResponseWriter, r *http.Request)
	// Get All External Materials
	// (GET /external/material)
	GetAllExternalMaterialsExternalMaterialGet(w http.ResponseWriter, r *http.Request)
	// Get Extra Fields
	// (GET /field/{entity_type})
	GetExtraFieldsFieldEntityTypeGet(w http.ResponseWriter, r *http.Request, entityType EntityType)
	// Delete Extra Field
	// (DELETE /field/{entity_type}/{key})
	DeleteExtraFieldFieldEntityTypeKeyDelete(w http.ResponseWriter, r *http.Request, entityType EntityType, key string)
	// Add Or Update Extra Field
	// (POST /field/{entity_type}/{key})
	AddOrUpdateExtraFieldFieldEntityTypeKeyPost(w http.ResponseWriter, r *http.Request, entityType EntityType, key string)
	// Find Filaments
	// (GET /filament)
	FindFilamentsFilamentGet(w http.ResponseWriter, r *http.Request, params FindFilamentsFilamentGetParams)
	// Add Filament
	// (POST /filament)
	AddFilamentFilamentPost(w http.ResponseWriter, r *http.Request)
	// Delete Filament
	// (DELETE /filament/{filament_id})
	DeleteFilamentFilamentFilamentIdDelete(w http.ResponseWriter, r *http.Request, filamentId int)
	// Get Filament
	// (GET /filament/{filament_id})
	GetFilamentFilamentFilamentIdGet(w http.ResponseWriter, r *http.Request, filamentId int)
	// Update Filament
	// (PATCH /filament/{filament_id})
	UpdateFilamentFilamentFilamentIdPatch(w http.ResponseWriter, r *http.Request, filamentId int)
	// Health
	// (GET /health)
	HealthHealthGet(w http.ResponseWriter, r *http.Request)
	// Info
	// (GET /info)
	InfoInfoGet(w http.ResponseWriter, r *http.Request)
	// Find Locations
	// (GET /location)
	FindLocationsLocationGet(w http.ResponseWriter, r *http.Request)
	// Rename Location
	// (PATCH /location/{location})
	RenameLocationLocationLocationPatch(w http.ResponseWriter, r *http.Request, location string)
	// Find Lot Numbers
	// (GET /lot-number)
	FindLotNumbersLotNumberGet(w http.ResponseWriter, r *http.Request)
	// Find Materials
	// (GET /material)
	FindMaterialsMaterialGet(w http.ResponseWriter, r *http.Request)
	// Get All Settings
	// (GET /setting/)
	GetAllSettingsSettingGet(w http.ResponseWriter, r *http.Request)
	// Get Setting
	// (GET /setting/{key})
	GetSettingSettingKeyGet(w http.ResponseWriter, r *http.Request, key string)
	// Set Setting
	// (POST /setting/{key})
	SetSettingSettingKeyPost(w http.ResponseWriter, r *http.Request, key string)
	// Find Spool
	// (GET /spool)
	FindSpoolSpoolGet(w http.ResponseWriter, r *http.Request, params FindSpoolSpoolGetParams)
	// Add Spool
	// (POST /spool)
	AddSpoolSpoolPost(w http.ResponseWriter, r *http.Request)
	// Delete Spool
	// (DELETE /spool/{spool_id})
	DeleteSpoolSpoolSpoolIdDelete(w http.ResponseWriter, r *http.Request, spoolId int)
	// Get Spool
	// (GET /spool/{spool_id})
	GetSpoolSpoolSpoolIdGet(w http.ResponseWriter, r *http.Request, spoolId int)
	// Update Spool
	// (PATCH /spool/{spool_id})
	UpdateSpoolSpoolSpoolIdPatch(w http.ResponseWriter, r *http.Request, spoolId int)
	// Use Spool Filament Based On The Current Weight Measurement
	// (PUT /spool/{spool_id}/measure)
	UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(w http.ResponseWriter, r *http.Request, spoolId int)
	// Use Spool Filament
	// (PUT /spool/{spool_id}/use)
	UseSpoolFilamentSpoolSpoolIdUsePut(w http.ResponseWriter, r *http.Request, spoolId int)
	// Find Vendor
	// (GET /vendor)
	FindVendorVendorGet(w http.ResponseWriter, r *http.Request, params FindVendorVendorGetParams)
	// Add Vendor
	// (POST /vendor)
	AddVendorVendorPost(w http.ResponseWriter, r *http.Request)
	// Delete Vendor
	// (DELETE /vendor/{vendor_id})
	DeleteVendorVendorVendorIdDelete(w http.ResponseWriter, r *http.Request, vendorId int)
	// Get Vendor
	// (GET /vendor/{vendor_id})
	GetVendorVendorVendorIdGet(w http.ResponseWriter, r *http.Request, vendorId int)
	// Update Vendor
	// (PATCH /vendor/{vendor_id})
	UpdateVendorVendorVendorIdPatch(w http.ResponseWriter, r *http.Request, vendorId int)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Find Article Numbers
// (GET /article-number)
func (_ Unimplemented) FindArticleNumbersArticleNumberGet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Backup
// (POST /backup)
func (_ Unimplemented) BackupBackupPost(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Export Filaments
// (GET /export/filaments)
func (_ Unimplemented) ExportFilamentsExportFilamentsGet(w http.ResponseWriter, r *http.Request, params ExportFilamentsExportFilamentsGetParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Export Spools
// (GET /export/spools)
func (_ Unimplemented) ExportSpoolsExportSpoolsGet(w http.ResponseWriter, r *http.Request, params ExportSpoolsExportSpoolsGetParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Export Vendors
// (GET /export/vendors)
func (_ Unimplemented) ExportVendorsExportVendorsGet(w http.ResponseWriter, r *http.Request, params ExportVendorsExportVendorsGetParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get All External Filaments
// (GET /external/filament)
func (_ Unimplemented) GetAllExternalFilamentsExternalFilamentGet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get All External Materials
// (GET /external/material)
func (_ Unimplemented) GetAllExternalMaterialsExternalMaterialGet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Extra Fields
// (GET /field/{entity_type})
func (_ Unimplemented) GetExtraFieldsFieldEntityTypeGet(w http.ResponseWriter, r *http.Request, entityType EntityType) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Extra Field
// (DELETE /field/{entity_type}/{key})
func (_ Unimplemented) DeleteExtraFieldFieldEntityTypeKeyDelete(w http.ResponseWriter, r *http.Request, entityType EntityType, key string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add Or Update Extra Field
// (POST /field/{entity_type}/{key})
func (_ Unimplemented) AddOrUpdateExtraFieldFieldEntityTypeKeyPost(w http.ResponseWriter, r *http.Request, entityType EntityType, key string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find Filaments
// (GET /filament)
func (_ Unimplemented) FindFilamentsFilamentGet(w http.ResponseWriter, r *http.Request, params FindFilamentsFilamentGetParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add Filament
// (POST /filament)
func (_ Unimplemented) AddFilamentFilamentPost(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Filament
// (DELETE /filament/{filament_id})
func (_ Unimplemented) DeleteFilamentFilamentFilamentIdDelete(w http.ResponseWriter, r *http.Request, filamentId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Filament
// (GET /filament/{filament_id})
func (_ Unimplemented) GetFilamentFilamentFilamentIdGet(w http.ResponseWriter, r *http.Request, filamentId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update Filament
// (PATCH /filament/{filament_id})
func (_ Unimplemented) UpdateFilamentFilamentFilamentIdPatch(w http.ResponseWriter, r *http.Request, filamentId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health
// (GET /health)
func (_ Unimplemented) HealthHealthGet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Info
// (GET /info)
func (_ Unimplemented) InfoInfoGet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find Locations
// (GET /location)
func (_ Unimplemented) FindLocationsLocationGet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Rename Location
// (PATCH /location/{location})
func (_ Unimplemented) RenameLocationLocationLocationPatch(w http.ResponseWriter, r *http.Request, location string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find Lot Numbers
// (GET /lot-number)
func (_ Unimplemented) FindLotNumbersLotNumberGet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find Materials
// (GET /material)
func (_ Unimplemented) FindMaterialsMaterialGet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get All Settings
// (GET /setting/)
func (_ Unimplemented) GetAllSettingsSettingGet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Setting
// (GET /setting/{key})
func (_ Unimplemented) GetSettingSettingKeyGet(w http.ResponseWriter, r *http.Request, key string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set Setting
// (POST /setting/{key})
func (_ Unimplemented) SetSettingSettingKeyPost(w http.ResponseWriter, r *http.Request, key string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find Spool
// (GET /spool)
func (_ Unimplemented) FindSpoolSpoolGet(w http.ResponseWriter, r *http.Request, params FindSpoolSpoolGetParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add Spool
// (POST /spool)
func (_ Unimplemented) AddSpoolSpoolPost(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Spool
// (DELETE /spool/{spool_id})
func (_ Unimplemented) DeleteSpoolSpoolSpoolIdDelete(w http.ResponseWriter, r *http.Request, spoolId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Spool
// (GET /spool/{spool_id})
func (_ Unimplemented) GetSpoolSpoolSpoolIdGet(w http.ResponseWriter, r *http.Request, spoolId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update Spool
// (PATCH /spool/{spool_id})
func (_ Unimplemented) UpdateSpoolSpoolSpoolIdPatch(w http.ResponseWriter, r *http.Request, spoolId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Use Spool Filament Based On The Current Weight Measurement
// (PUT /spool/{spool_id}/measure)
func (_ Unimplemented) UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(w http.ResponseWriter, r *http.Request, spoolId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Use Spool Filament
// (PUT /spool/{spool_id}/use)
func (_ Unimplemented) UseSpoolFilamentSpoolSpoolIdUsePut(w http.ResponseWriter, r *http.Request, spoolId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find Vendor
// (GET /vendor)
func (_ Unimplemented) FindVendorVendorGet(w http.ResponseWriter, r *http.Request, params FindVendorVendorGetParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add Vendor
// (POST /vendor)
func (_ Unimplemented) AddVendorVendorPost(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Vendor
// (DELETE /vendor/{vendor_id})
func (_ Unimplemented) DeleteVendorVendorVendorIdDelete(w http.ResponseWriter, r *http.Request, vendorId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Vendor
// (GET /vendor/{vendor_id})
func (_ Unimplemented) GetVendorVendorVendorIdGet(w http.ResponseWriter, r *http.Request, vendorId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update Vendor
// (PATCH /vendor/{vendor_id})
func (_ Unimplemented) UpdateVendorVendorVendorIdPatch(w http.ResponseWriter, r *http.Request, vendorId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// FindArticleNumbersArticleNumberGet operation middleware
func (siw *ServerInterfaceWrapper) FindArticleNumbersArticleNumberGet(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindArticleNumbersArticleNumberGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// BackupBackupPost operation middleware
func (siw *ServerInterfaceWrapper) BackupBackupPost(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BackupBackupPost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ExportFilamentsExportFilamentsGet operation middleware
func (siw *ServerInterfaceWrapper) ExportFilamentsExportFilamentsGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportFilamentsExportFilamentsGetParams

	// ------------- Required query parameter "fmt" -------------

	if paramValue := r.URL.Query().Get("fmt"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "fmt"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "fmt", r.URL.Query(), &params.Fmt)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fmt", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExportFilamentsExportFilamentsGet(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ExportSpoolsExportSpoolsGet operation middleware
func (siw *ServerInterfaceWrapper) ExportSpoolsExportSpoolsGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportSpoolsExportSpoolsGetParams

	// ------------- Required query parameter "fmt" -------------

	if paramValue := r.URL.Query().Get("fmt"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "fmt"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "fmt", r.URL.Query(), &params.Fmt)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fmt", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExportSpoolsExportSpoolsGet(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ExportVendorsExportVendorsGet operation middleware
func (siw *ServerInterfaceWrapper) ExportVendorsExportVendorsGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportVendorsExportVendorsGetParams

	// ------------- Required query parameter "fmt" -------------

	if paramValue := r.URL.Query().Get("fmt"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "fmt"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "fmt", r.URL.Query(), &params.Fmt)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fmt", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExportVendorsExportVendorsGet(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllExternalFilamentsExternalFilamentGet operation middleware
func (siw *ServerInterfaceWrapper) GetAllExternalFilamentsExternalFilamentGet(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllExternalFilamentsExternalFilamentGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllExternalMaterialsExternalMaterialGet operation middleware
func (siw *ServerInterfaceWrapper) GetAllExternalMaterialsExternalMaterialGet(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllExternalMaterialsExternalMaterialGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetExtraFieldsFieldEntityTypeGet operation middleware
func (siw *ServerInterfaceWrapper) GetExtraFieldsFieldEntityTypeGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "entity_type" -------------
	var entityType EntityType

	err = runtime.BindStyledParameterWithOptions("simple", "entity_type", chi.URLParam(r, "entity_type"), &entityType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity_type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExtraFieldsFieldEntityTypeGet(w, r, entityType)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteExtraFieldFieldEntityTypeKeyDelete operation middleware
func (siw *ServerInterfaceWrapper) DeleteExtraFieldFieldEntityTypeKeyDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "entity_type" -------------
	var entityType EntityType

	err = runtime.BindStyledParameterWithOptions("simple", "entity_type", chi.URLParam(r, "entity_type"), &entityType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity_type", Err: err})
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", chi.URLParam(r, "key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteExtraFieldFieldEntityTypeKeyDelete(w, r, entityType, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddOrUpdateExtraFieldFieldEntityTypeKeyPost operation middleware
func (siw *ServerInterfaceWrapper) AddOrUpdateExtraFieldFieldEntityTypeKeyPost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "entity_type" -------------
	var entityType EntityType

	err = runtime.BindStyledParameterWithOptions("simple", "entity_type", chi.URLParam(r, "entity_type"), &entityType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity_type", Err: err})
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", chi.URLParam(r, "key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddOrUpdateExtraFieldFieldEntityTypeKeyPost(w, r, entityType, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FindFilamentsFilamentGet operation middleware
func (siw *ServerInterfaceWrapper) FindFilamentsFilamentGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindFilamentsFilamentGetParams

	// ------------- Optional query parameter "vendor_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "vendor_name", r.URL.Query(), &params.VendorName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vendor_name", Err: err})
		return
	}

	// ------------- Optional query parameter "vendor_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "vendor_id", r.URL.Query(), &params.VendorId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vendor_id", Err: err})
		return
	}

	// ------------- Optional query parameter "vendor_dot_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "vendor_dot_name", r.URL.Query(), &params.VendorDotName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vendor_dot_name", Err: err})
		return
	}

	// ------------- Optional query parameter "vendor_dot_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "vendor_dot_id", r.URL.Query(), &params.VendorDotId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vendor_dot_id", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "material" -------------

	err = runtime.BindQueryParameter("form", true, false, "material", r.URL.Query(), &params.Material)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "material", Err: err})
		return
	}

	// ------------- Optional query parameter "article_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "article_number", r.URL.Query(), &params.ArticleNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "article_number", Err: err})
		return
	}

	// ------------- Optional query parameter "color_hex" -------------

	err = runtime.BindQueryParameter("form", true, false, "color_hex", r.URL.Query(), &params.ColorHex)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "color_hex", Err: err})
		return
	}

	// ------------- Optional query parameter "color_similarity_threshold" -------------

	err = runtime.BindQueryParameter("form", true, false, "color_similarity_threshold", r.URL.Query(), &params.ColorSimilarityThreshold)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "color_similarity_threshold", Err: err})
		return
	}

	// ------------- Optional query parameter "external_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "external_id", r.URL.Query(), &params.ExternalId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "external_id", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindFilamentsFilamentGet(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddFilamentFilamentPost operation middleware
func (siw *ServerInterfaceWrapper) AddFilamentFilamentPost(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddFilamentFilamentPost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFilamentFilamentFilamentIdDelete operation middleware
func (siw *ServerInterfaceWrapper) DeleteFilamentFilamentFilamentIdDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "filament_id" -------------
	var filamentId int

	err = runtime.BindStyledParameterWithOptions("simple", "filament_id", chi.URLParam(r, "filament_id"), &filamentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filament_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFilamentFilamentFilamentIdDelete(w, r, filamentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFilamentFilamentFilamentIdGet operation middleware
func (siw *ServerInterfaceWrapper) GetFilamentFilamentFilamentIdGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "filament_id" -------------
	var filamentId int

	err = runtime.BindStyledParameterWithOptions("simple", "filament_id", chi.URLParam(r, "filament_id"), &filamentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filament_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFilamentFilamentFilamentIdGet(w, r, filamentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateFilamentFilamentFilamentIdPatch operation middleware
func (siw *ServerInterfaceWrapper) UpdateFilamentFilamentFilamentIdPatch(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "filament_id" -------------
	var filamentId int

	err = runtime.BindStyledParameterWithOptions("simple", "filament_id", chi.URLParam(r, "filament_id"), &filamentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filament_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFilamentFilamentFilamentIdPatch(w, r, filamentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthHealthGet operation middleware
func (siw *ServerInterfaceWrapper) HealthHealthGet(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthHealthGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// InfoInfoGet operation middleware
func (siw *ServerInterfaceWrapper) InfoInfoGet(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InfoInfoGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FindLocationsLocationGet operation middleware
func (siw *ServerInterfaceWrapper) FindLocationsLocationGet(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindLocationsLocationGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RenameLocationLocationLocationPatch operation middleware
func (siw *ServerInterfaceWrapper) RenameLocationLocationLocationPatch(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "location" -------------
	var location string

	err = runtime.BindStyledParameterWithOptions("simple", "location", chi.URLParam(r, "location"), &location, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "location", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RenameLocationLocationLocationPatch(w, r, location)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FindLotNumbersLotNumberGet operation middleware
func (siw *ServerInterfaceWrapper) FindLotNumbersLotNumberGet(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindLotNumbersLotNumberGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FindMaterialsMaterialGet operation middleware
func (siw *ServerInterfaceWrapper) FindMaterialsMaterialGet(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindMaterialsMaterialGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllSettingsSettingGet operation middleware
func (siw *ServerInterfaceWrapper) GetAllSettingsSettingGet(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllSettingsSettingGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSettingSettingKeyGet operation middleware
func (siw *ServerInterfaceWrapper) GetSettingSettingKeyGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", chi.URLParam(r, "key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSettingSettingKeyGet(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SetSettingSettingKeyPost operation middleware
func (siw *ServerInterfaceWrapper) SetSettingSettingKeyPost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", chi.URLParam(r, "key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetSettingSettingKeyPost(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FindSpoolSpoolGet operation middleware
func (siw *ServerInterfaceWrapper) FindSpoolSpoolGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindSpoolSpoolGetParams

	// ------------- Optional query parameter "filament_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "filament_name", r.URL.Query(), &params.FilamentName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filament_name", Err: err})
		return
	}

	// ------------- Optional query parameter "filament_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "filament_id", r.URL.Query(), &params.FilamentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filament_id", Err: err})
		return
	}

	// ------------- Optional query parameter "filament_material" -------------

	err = runtime.BindQueryParameter("form", true, false, "filament_material", r.URL.Query(), &params.FilamentMaterial)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filament_material", Err: err})
		return
	}

	// ------------- Optional query parameter "vendor_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "vendor_name", r.URL.Query(), &params.VendorName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vendor_name", Err: err})
		return
	}

	// ------------- Optional query parameter "vendor_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "vendor_id", r.URL.Query(), &params.VendorId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vendor_id", Err: err})
		return
	}

	// ------------- Optional query parameter "filament_dot_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "filament_dot_name", r.URL.Query(), &params.FilamentDotName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filament_dot_name", Err: err})
		return
	}

	// ------------- Optional query parameter "filament_dot_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "filament_dot_id", r.URL.Query(), &params.FilamentDotId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filament_dot_id", Err: err})
		return
	}

	// ------------- Optional query parameter "filament_dot_material" -------------

	err = runtime.BindQueryParameter("form", true, false, "filament_dot_material", r.URL.Query(), &params.FilamentDotMaterial)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filament_dot_material", Err: err})
		return
	}

	// ------------- Optional query parameter "filament_dot_vendor_dot_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "filament_dot_vendor_dot_name", r.URL.Query(), &params.FilamentDotVendorDotName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filament_dot_vendor_dot_name", Err: err})
		return
	}

	// ------------- Optional query parameter "filament_dot_vendor_dot_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "filament_dot_vendor_dot_id", r.URL.Query(), &params.FilamentDotVendorDotId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filament_dot_vendor_dot_id", Err: err})
		return
	}

	// ------------- Optional query parameter "location" -------------

	err = runtime.BindQueryParameter("form", true, false, "location", r.URL.Query(), &params.Location)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "location", Err: err})
		return
	}

	// ------------- Optional query parameter "lot_nr" -------------

	err = runtime.BindQueryParameter("form", true, false, "lot_nr", r.URL.Query(), &params.LotNr)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lot_nr", Err: err})
		return
	}

	// ------------- Optional query parameter "allow_archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "allow_archived", r.URL.Query(), &params.AllowArchived)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "allow_archived", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindSpoolSpoolGet(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddSpoolSpoolPost operation middleware
func (siw *ServerInterfaceWrapper) AddSpoolSpoolPost(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddSpoolSpoolPost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSpoolSpoolSpoolIdDelete operation middleware
func (siw *ServerInterfaceWrapper) DeleteSpoolSpoolSpoolIdDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "spool_id" -------------
	var spoolId int

	err = runtime.BindStyledParameterWithOptions("simple", "spool_id", chi.URLParam(r, "spool_id"), &spoolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spool_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSpoolSpoolSpoolIdDelete(w, r, spoolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSpoolSpoolSpoolIdGet operation middleware
func (siw *ServerInterfaceWrapper) GetSpoolSpoolSpoolIdGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "spool_id" -------------
	var spoolId int

	err = runtime.BindStyledParameterWithOptions("simple", "spool_id", chi.URLParam(r, "spool_id"), &spoolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spool_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSpoolSpoolSpoolIdGet(w, r, spoolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateSpoolSpoolSpoolIdPatch operation middleware
func (siw *ServerInterfaceWrapper) UpdateSpoolSpoolSpoolIdPatch(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "spool_id" -------------
	var spoolId int

	err = runtime.BindStyledParameterWithOptions("simple", "spool_id", chi.URLParam(r, "spool_id"), &spoolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spool_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSpoolSpoolSpoolIdPatch(w, r, spoolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut operation middleware
func (siw *ServerInterfaceWrapper) UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "spool_id" -------------
	var spoolId int

	err = runtime.BindStyledParameterWithOptions("simple", "spool_id", chi.URLParam(r, "spool_id"), &spoolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spool_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(w, r, spoolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UseSpoolFilamentSpoolSpoolIdUsePut operation middleware
func (siw *ServerInterfaceWrapper) UseSpoolFilamentSpoolSpoolIdUsePut(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "spool_id" -------------
	var spoolId int

	err = runtime.BindStyledParameterWithOptions("simple", "spool_id", chi.URLParam(r, "spool_id"), &spoolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spool_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UseSpoolFilamentSpoolSpoolIdUsePut(w, r, spoolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FindVendorVendorGet operation middleware
func (siw *ServerInterfaceWrapper) FindVendorVendorGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindVendorVendorGetParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "external_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "external_id", r.URL.Query(), &params.ExternalId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "external_id", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindVendorVendorGet(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddVendorVendorPost operation middleware
func (siw *ServerInterfaceWrapper) AddVendorVendorPost(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddVendorVendorPost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteVendorVendorVendorIdDelete operation middleware
func (siw *ServerInterfaceWrapper) DeleteVendorVendorVendorIdDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "vendor_id" -------------
	var vendorId int

	err = runtime.BindStyledParameterWithOptions("simple", "vendor_id", chi.URLParam(r, "vendor_id"), &vendorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vendor_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteVendorVendorVendorIdDelete(w, r, vendorId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVendorVendorVendorIdGet operation middleware
func (siw *ServerInterfaceWrapper) GetVendorVendorVendorIdGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "vendor_id" -------------
	var vendorId int

	err = runtime.BindStyledParameterWithOptions("simple", "vendor_id", chi.URLParam(r, "vendor_id"), &vendorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vendor_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVendorVendorVendorIdGet(w, r, vendorId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateVendorVendorVendorIdPatch operation middleware
func (siw *ServerInterfaceWrapper) UpdateVendorVendorVendorIdPatch(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "vendor_id" -------------
	var vendorId int

	err = runtime.BindStyledParameterWithOptions("simple", "vendor_id", chi.URLParam(r, "vendor_id"), &vendorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vendor_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateVendorVendorVendorIdPatch(w, r, vendorId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/article-number", wrapper.FindArticleNumbersArticleNumberGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/backup", wrapper.BackupBackupPost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/export/filaments", wrapper.ExportFilamentsExportFilamentsGet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/export/spools", wrapper.ExportSpoolsExportSpoolsGet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/export/vendors", wrapper.ExportVendorsExportVendorsGet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/external/filament", wrapper.GetAllExternalFilamentsExternalFilamentGet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/external/material", wrapper.GetAllExternalMaterialsExternalMaterialGet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/field/{entity_type}", wrapper.GetExtraFieldsFieldEntityTypeGet)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/field/{entity_type}/{key}", wrapper.DeleteExtraFieldFieldEntityTypeKeyDelete)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/field/{entity_type}/{key}", wrapper.AddOrUpdateExtraFieldFieldEntityTypeKeyPost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/filament", wrapper.FindFilamentsFilamentGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/filament", wrapper.AddFilamentFilamentPost)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/filament/{filament_id}", wrapper.DeleteFilamentFilamentFilamentIdDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/filament/{filament_id}", wrapper.GetFilamentFilamentFilamentIdGet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/filament/{filament_id}", wrapper.UpdateFilamentFilamentFilamentIdPatch)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.HealthHealthGet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info", wrapper.InfoInfoGet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/location", wrapper.FindLocationsLocationGet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/location/{location}", wrapper.RenameLocationLocationLocationPatch)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/lot-number", wrapper.FindLotNumbersLotNumberGet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/material", wrapper.FindMaterialsMaterialGet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/setting/", wrapper.GetAllSettingsSettingGet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/setting/{key}", wrapper.GetSettingSettingKeyGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/setting/{key}", wrapper.SetSettingSettingKeyPost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/spool", wrapper.FindSpoolSpoolGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/spool", wrapper.AddSpoolSpoolPost)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/spool/{spool_id}", wrapper.DeleteSpoolSpoolSpoolIdDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/spool/{spool_id}", wrapper.GetSpoolSpoolSpoolIdGet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/spool/{spool_id}", wrapper.UpdateSpoolSpoolSpoolIdPatch)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/spool/{spool_id}/measure", wrapper.UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/spool/{spool_id}/use", wrapper.UseSpoolFilamentSpoolSpoolIdUsePut)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/vendor", wrapper.FindVendorVendorGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/vendor", wrapper.AddVendorVendorPost)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/vendor/{vendor_id}", wrapper.DeleteVendorVendorVendorIdDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/vendor/{vendor_id}", wrapper.GetVendorVendorVendorIdGet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/vendor/{vendor_id}", wrapper.UpdateVendorVendorVendorIdPatch)
	})

	return r
}
