// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spoolman-go/ent/filament"
	"spoolman-go/ent/filamentfield"
	"spoolman-go/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FilamentFieldUpdate is the builder for updating FilamentField entities.
type FilamentFieldUpdate struct {
	config
	hooks    []Hook
	mutation *FilamentFieldMutation
}

// Where appends a list predicates to the FilamentFieldUpdate builder.
func (ffu *FilamentFieldUpdate) Where(ps ...predicate.FilamentField) *FilamentFieldUpdate {
	ffu.mutation.Where(ps...)
	return ffu
}

// SetFilamentID sets the "filament_id" field.
func (ffu *FilamentFieldUpdate) SetFilamentID(i int) *FilamentFieldUpdate {
	ffu.mutation.SetFilamentID(i)
	return ffu
}

// SetNillableFilamentID sets the "filament_id" field if the given value is not nil.
func (ffu *FilamentFieldUpdate) SetNillableFilamentID(i *int) *FilamentFieldUpdate {
	if i != nil {
		ffu.SetFilamentID(*i)
	}
	return ffu
}

// SetKey sets the "key" field.
func (ffu *FilamentFieldUpdate) SetKey(s string) *FilamentFieldUpdate {
	ffu.mutation.SetKey(s)
	return ffu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ffu *FilamentFieldUpdate) SetNillableKey(s *string) *FilamentFieldUpdate {
	if s != nil {
		ffu.SetKey(*s)
	}
	return ffu
}

// SetValue sets the "value" field.
func (ffu *FilamentFieldUpdate) SetValue(s string) *FilamentFieldUpdate {
	ffu.mutation.SetValue(s)
	return ffu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ffu *FilamentFieldUpdate) SetNillableValue(s *string) *FilamentFieldUpdate {
	if s != nil {
		ffu.SetValue(*s)
	}
	return ffu
}

// SetFilament sets the "filament" edge to the Filament entity.
func (ffu *FilamentFieldUpdate) SetFilament(f *Filament) *FilamentFieldUpdate {
	return ffu.SetFilamentID(f.ID)
}

// Mutation returns the FilamentFieldMutation object of the builder.
func (ffu *FilamentFieldUpdate) Mutation() *FilamentFieldMutation {
	return ffu.mutation
}

// ClearFilament clears the "filament" edge to the Filament entity.
func (ffu *FilamentFieldUpdate) ClearFilament() *FilamentFieldUpdate {
	ffu.mutation.ClearFilament()
	return ffu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ffu *FilamentFieldUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ffu.sqlSave, ffu.mutation, ffu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ffu *FilamentFieldUpdate) SaveX(ctx context.Context) int {
	affected, err := ffu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ffu *FilamentFieldUpdate) Exec(ctx context.Context) error {
	_, err := ffu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffu *FilamentFieldUpdate) ExecX(ctx context.Context) {
	if err := ffu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ffu *FilamentFieldUpdate) check() error {
	if v, ok := ffu.mutation.Key(); ok {
		if err := filamentfield.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "FilamentField.key": %w`, err)}
		}
	}
	if ffu.mutation.FilamentCleared() && len(ffu.mutation.FilamentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FilamentField.filament"`)
	}
	return nil
}

func (ffu *FilamentFieldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ffu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(filamentfield.Table, filamentfield.Columns, sqlgraph.NewFieldSpec(filamentfield.FieldID, field.TypeInt))
	if ps := ffu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ffu.mutation.Key(); ok {
		_spec.SetField(filamentfield.FieldKey, field.TypeString, value)
	}
	if value, ok := ffu.mutation.Value(); ok {
		_spec.SetField(filamentfield.FieldValue, field.TypeString, value)
	}
	if ffu.mutation.FilamentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filamentfield.FilamentTable,
			Columns: []string{filamentfield.FilamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ffu.mutation.FilamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filamentfield.FilamentTable,
			Columns: []string{filamentfield.FilamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ffu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filamentfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ffu.mutation.done = true
	return n, nil
}

// FilamentFieldUpdateOne is the builder for updating a single FilamentField entity.
type FilamentFieldUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FilamentFieldMutation
}

// SetFilamentID sets the "filament_id" field.
func (ffuo *FilamentFieldUpdateOne) SetFilamentID(i int) *FilamentFieldUpdateOne {
	ffuo.mutation.SetFilamentID(i)
	return ffuo
}

// SetNillableFilamentID sets the "filament_id" field if the given value is not nil.
func (ffuo *FilamentFieldUpdateOne) SetNillableFilamentID(i *int) *FilamentFieldUpdateOne {
	if i != nil {
		ffuo.SetFilamentID(*i)
	}
	return ffuo
}

// SetKey sets the "key" field.
func (ffuo *FilamentFieldUpdateOne) SetKey(s string) *FilamentFieldUpdateOne {
	ffuo.mutation.SetKey(s)
	return ffuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ffuo *FilamentFieldUpdateOne) SetNillableKey(s *string) *FilamentFieldUpdateOne {
	if s != nil {
		ffuo.SetKey(*s)
	}
	return ffuo
}

// SetValue sets the "value" field.
func (ffuo *FilamentFieldUpdateOne) SetValue(s string) *FilamentFieldUpdateOne {
	ffuo.mutation.SetValue(s)
	return ffuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ffuo *FilamentFieldUpdateOne) SetNillableValue(s *string) *FilamentFieldUpdateOne {
	if s != nil {
		ffuo.SetValue(*s)
	}
	return ffuo
}

// SetFilament sets the "filament" edge to the Filament entity.
func (ffuo *FilamentFieldUpdateOne) SetFilament(f *Filament) *FilamentFieldUpdateOne {
	return ffuo.SetFilamentID(f.ID)
}

// Mutation returns the FilamentFieldMutation object of the builder.
func (ffuo *FilamentFieldUpdateOne) Mutation() *FilamentFieldMutation {
	return ffuo.mutation
}

// ClearFilament clears the "filament" edge to the Filament entity.
func (ffuo *FilamentFieldUpdateOne) ClearFilament() *FilamentFieldUpdateOne {
	ffuo.mutation.ClearFilament()
	return ffuo
}

// Where appends a list predicates to the FilamentFieldUpdate builder.
func (ffuo *FilamentFieldUpdateOne) Where(ps ...predicate.FilamentField) *FilamentFieldUpdateOne {
	ffuo.mutation.Where(ps...)
	return ffuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ffuo *FilamentFieldUpdateOne) Select(field string, fields ...string) *FilamentFieldUpdateOne {
	ffuo.fields = append([]string{field}, fields...)
	return ffuo
}

// Save executes the query and returns the updated FilamentField entity.
func (ffuo *FilamentFieldUpdateOne) Save(ctx context.Context) (*FilamentField, error) {
	return withHooks(ctx, ffuo.sqlSave, ffuo.mutation, ffuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ffuo *FilamentFieldUpdateOne) SaveX(ctx context.Context) *FilamentField {
	node, err := ffuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ffuo *FilamentFieldUpdateOne) Exec(ctx context.Context) error {
	_, err := ffuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffuo *FilamentFieldUpdateOne) ExecX(ctx context.Context) {
	if err := ffuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ffuo *FilamentFieldUpdateOne) check() error {
	if v, ok := ffuo.mutation.Key(); ok {
		if err := filamentfield.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "FilamentField.key": %w`, err)}
		}
	}
	if ffuo.mutation.FilamentCleared() && len(ffuo.mutation.FilamentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FilamentField.filament"`)
	}
	return nil
}

func (ffuo *FilamentFieldUpdateOne) sqlSave(ctx context.Context) (_node *FilamentField, err error) {
	if err := ffuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(filamentfield.Table, filamentfield.Columns, sqlgraph.NewFieldSpec(filamentfield.FieldID, field.TypeInt))
	id, ok := ffuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FilamentField.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ffuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filamentfield.FieldID)
		for _, f := range fields {
			if !filamentfield.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filamentfield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ffuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ffuo.mutation.Key(); ok {
		_spec.SetField(filamentfield.FieldKey, field.TypeString, value)
	}
	if value, ok := ffuo.mutation.Value(); ok {
		_spec.SetField(filamentfield.FieldValue, field.TypeString, value)
	}
	if ffuo.mutation.FilamentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filamentfield.FilamentTable,
			Columns: []string{filamentfield.FilamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ffuo.mutation.FilamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filamentfield.FilamentTable,
			Columns: []string{filamentfield.FilamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FilamentField{config: ffuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ffuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filamentfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ffuo.mutation.done = true
	return _node, nil
}
