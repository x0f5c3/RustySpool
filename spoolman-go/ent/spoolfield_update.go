// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spoolman-go/ent/predicate"
	"spoolman-go/ent/spool"
	"spoolman-go/ent/spoolfield"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpoolFieldUpdate is the builder for updating SpoolField entities.
type SpoolFieldUpdate struct {
	config
	hooks    []Hook
	mutation *SpoolFieldMutation
}

// Where appends a list predicates to the SpoolFieldUpdate builder.
func (sfu *SpoolFieldUpdate) Where(ps ...predicate.SpoolField) *SpoolFieldUpdate {
	sfu.mutation.Where(ps...)
	return sfu
}

// SetSpoolID sets the "spool_id" field.
func (sfu *SpoolFieldUpdate) SetSpoolID(i int) *SpoolFieldUpdate {
	sfu.mutation.SetSpoolID(i)
	return sfu
}

// SetNillableSpoolID sets the "spool_id" field if the given value is not nil.
func (sfu *SpoolFieldUpdate) SetNillableSpoolID(i *int) *SpoolFieldUpdate {
	if i != nil {
		sfu.SetSpoolID(*i)
	}
	return sfu
}

// SetKey sets the "key" field.
func (sfu *SpoolFieldUpdate) SetKey(s string) *SpoolFieldUpdate {
	sfu.mutation.SetKey(s)
	return sfu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (sfu *SpoolFieldUpdate) SetNillableKey(s *string) *SpoolFieldUpdate {
	if s != nil {
		sfu.SetKey(*s)
	}
	return sfu
}

// SetValue sets the "value" field.
func (sfu *SpoolFieldUpdate) SetValue(s string) *SpoolFieldUpdate {
	sfu.mutation.SetValue(s)
	return sfu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (sfu *SpoolFieldUpdate) SetNillableValue(s *string) *SpoolFieldUpdate {
	if s != nil {
		sfu.SetValue(*s)
	}
	return sfu
}

// SetSpool sets the "spool" edge to the Spool entity.
func (sfu *SpoolFieldUpdate) SetSpool(s *Spool) *SpoolFieldUpdate {
	return sfu.SetSpoolID(s.ID)
}

// Mutation returns the SpoolFieldMutation object of the builder.
func (sfu *SpoolFieldUpdate) Mutation() *SpoolFieldMutation {
	return sfu.mutation
}

// ClearSpool clears the "spool" edge to the Spool entity.
func (sfu *SpoolFieldUpdate) ClearSpool() *SpoolFieldUpdate {
	sfu.mutation.ClearSpool()
	return sfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sfu *SpoolFieldUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sfu.sqlSave, sfu.mutation, sfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfu *SpoolFieldUpdate) SaveX(ctx context.Context) int {
	affected, err := sfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sfu *SpoolFieldUpdate) Exec(ctx context.Context) error {
	_, err := sfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfu *SpoolFieldUpdate) ExecX(ctx context.Context) {
	if err := sfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfu *SpoolFieldUpdate) check() error {
	if v, ok := sfu.mutation.Key(); ok {
		if err := spoolfield.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "SpoolField.key": %w`, err)}
		}
	}
	if sfu.mutation.SpoolCleared() && len(sfu.mutation.SpoolIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SpoolField.spool"`)
	}
	return nil
}

func (sfu *SpoolFieldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(spoolfield.Table, spoolfield.Columns, sqlgraph.NewFieldSpec(spoolfield.FieldID, field.TypeInt))
	if ps := sfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfu.mutation.Key(); ok {
		_spec.SetField(spoolfield.FieldKey, field.TypeString, value)
	}
	if value, ok := sfu.mutation.Value(); ok {
		_spec.SetField(spoolfield.FieldValue, field.TypeString, value)
	}
	if sfu.mutation.SpoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spoolfield.SpoolTable,
			Columns: []string{spoolfield.SpoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spool.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sfu.mutation.SpoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spoolfield.SpoolTable,
			Columns: []string{spoolfield.SpoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spoolfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sfu.mutation.done = true
	return n, nil
}

// SpoolFieldUpdateOne is the builder for updating a single SpoolField entity.
type SpoolFieldUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpoolFieldMutation
}

// SetSpoolID sets the "spool_id" field.
func (sfuo *SpoolFieldUpdateOne) SetSpoolID(i int) *SpoolFieldUpdateOne {
	sfuo.mutation.SetSpoolID(i)
	return sfuo
}

// SetNillableSpoolID sets the "spool_id" field if the given value is not nil.
func (sfuo *SpoolFieldUpdateOne) SetNillableSpoolID(i *int) *SpoolFieldUpdateOne {
	if i != nil {
		sfuo.SetSpoolID(*i)
	}
	return sfuo
}

// SetKey sets the "key" field.
func (sfuo *SpoolFieldUpdateOne) SetKey(s string) *SpoolFieldUpdateOne {
	sfuo.mutation.SetKey(s)
	return sfuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (sfuo *SpoolFieldUpdateOne) SetNillableKey(s *string) *SpoolFieldUpdateOne {
	if s != nil {
		sfuo.SetKey(*s)
	}
	return sfuo
}

// SetValue sets the "value" field.
func (sfuo *SpoolFieldUpdateOne) SetValue(s string) *SpoolFieldUpdateOne {
	sfuo.mutation.SetValue(s)
	return sfuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (sfuo *SpoolFieldUpdateOne) SetNillableValue(s *string) *SpoolFieldUpdateOne {
	if s != nil {
		sfuo.SetValue(*s)
	}
	return sfuo
}

// SetSpool sets the "spool" edge to the Spool entity.
func (sfuo *SpoolFieldUpdateOne) SetSpool(s *Spool) *SpoolFieldUpdateOne {
	return sfuo.SetSpoolID(s.ID)
}

// Mutation returns the SpoolFieldMutation object of the builder.
func (sfuo *SpoolFieldUpdateOne) Mutation() *SpoolFieldMutation {
	return sfuo.mutation
}

// ClearSpool clears the "spool" edge to the Spool entity.
func (sfuo *SpoolFieldUpdateOne) ClearSpool() *SpoolFieldUpdateOne {
	sfuo.mutation.ClearSpool()
	return sfuo
}

// Where appends a list predicates to the SpoolFieldUpdate builder.
func (sfuo *SpoolFieldUpdateOne) Where(ps ...predicate.SpoolField) *SpoolFieldUpdateOne {
	sfuo.mutation.Where(ps...)
	return sfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sfuo *SpoolFieldUpdateOne) Select(field string, fields ...string) *SpoolFieldUpdateOne {
	sfuo.fields = append([]string{field}, fields...)
	return sfuo
}

// Save executes the query and returns the updated SpoolField entity.
func (sfuo *SpoolFieldUpdateOne) Save(ctx context.Context) (*SpoolField, error) {
	return withHooks(ctx, sfuo.sqlSave, sfuo.mutation, sfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfuo *SpoolFieldUpdateOne) SaveX(ctx context.Context) *SpoolField {
	node, err := sfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sfuo *SpoolFieldUpdateOne) Exec(ctx context.Context) error {
	_, err := sfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfuo *SpoolFieldUpdateOne) ExecX(ctx context.Context) {
	if err := sfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfuo *SpoolFieldUpdateOne) check() error {
	if v, ok := sfuo.mutation.Key(); ok {
		if err := spoolfield.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "SpoolField.key": %w`, err)}
		}
	}
	if sfuo.mutation.SpoolCleared() && len(sfuo.mutation.SpoolIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SpoolField.spool"`)
	}
	return nil
}

func (sfuo *SpoolFieldUpdateOne) sqlSave(ctx context.Context) (_node *SpoolField, err error) {
	if err := sfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(spoolfield.Table, spoolfield.Columns, sqlgraph.NewFieldSpec(spoolfield.FieldID, field.TypeInt))
	id, ok := sfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpoolField.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spoolfield.FieldID)
		for _, f := range fields {
			if !spoolfield.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spoolfield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfuo.mutation.Key(); ok {
		_spec.SetField(spoolfield.FieldKey, field.TypeString, value)
	}
	if value, ok := sfuo.mutation.Value(); ok {
		_spec.SetField(spoolfield.FieldValue, field.TypeString, value)
	}
	if sfuo.mutation.SpoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spoolfield.SpoolTable,
			Columns: []string{spoolfield.SpoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spool.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sfuo.mutation.SpoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spoolfield.SpoolTable,
			Columns: []string{spoolfield.SpoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SpoolField{config: sfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spoolfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sfuo.mutation.done = true
	return _node, nil
}
