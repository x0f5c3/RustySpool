// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"spoolman-go/ent/filament"
	"spoolman-go/ent/filamentfield"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FilamentField is the model entity for the FilamentField schema.
type FilamentField struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FilamentID holds the value of the "filament_id" field.
	FilamentID int `json:"filament_id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FilamentFieldQuery when eager-loading is set.
	Edges        FilamentFieldEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FilamentFieldEdges holds the relations/edges for other nodes in the graph.
type FilamentFieldEdges struct {
	// Filament holds the value of the filament edge.
	Filament *Filament `json:"filament,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FilamentOrErr returns the Filament value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FilamentFieldEdges) FilamentOrErr() (*Filament, error) {
	if e.Filament != nil {
		return e.Filament, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: filament.Label}
	}
	return nil, &NotLoadedError{edge: "filament"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FilamentField) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case filamentfield.FieldID, filamentfield.FieldFilamentID:
			values[i] = new(sql.NullInt64)
		case filamentfield.FieldKey, filamentfield.FieldValue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FilamentField fields.
func (ff *FilamentField) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filamentfield.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ff.ID = int(value.Int64)
		case filamentfield.FieldFilamentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field filament_id", values[i])
			} else if value.Valid {
				ff.FilamentID = int(value.Int64)
			}
		case filamentfield.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				ff.Key = value.String
			}
		case filamentfield.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ff.Value = value.String
			}
		default:
			ff.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the FilamentField.
// This includes values selected through modifiers, order, etc.
func (ff *FilamentField) GetValue(name string) (ent.Value, error) {
	return ff.selectValues.Get(name)
}

// QueryFilament queries the "filament" edge of the FilamentField entity.
func (ff *FilamentField) QueryFilament() *FilamentQuery {
	return NewFilamentFieldClient(ff.config).QueryFilament(ff)
}

// Update returns a builder for updating this FilamentField.
// Note that you need to call FilamentField.Unwrap() before calling this method if this FilamentField
// was returned from a transaction, and the transaction was committed or rolled back.
func (ff *FilamentField) Update() *FilamentFieldUpdateOne {
	return NewFilamentFieldClient(ff.config).UpdateOne(ff)
}

// Unwrap unwraps the FilamentField entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ff *FilamentField) Unwrap() *FilamentField {
	_tx, ok := ff.config.driver.(*txDriver)
	if !ok {
		panic("ent: FilamentField is not a transactional entity")
	}
	ff.config.driver = _tx.drv
	return ff
}

// String implements the fmt.Stringer.
func (ff *FilamentField) String() string {
	var builder strings.Builder
	builder.WriteString("FilamentField(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ff.ID))
	builder.WriteString("filament_id=")
	builder.WriteString(fmt.Sprintf("%v", ff.FilamentID))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(ff.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(ff.Value)
	builder.WriteByte(')')
	return builder.String()
}

// FilamentFields is a parsable slice of FilamentField.
type FilamentFields []*FilamentField
