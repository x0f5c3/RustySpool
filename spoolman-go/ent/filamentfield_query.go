// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"spoolman-go/ent/filament"
	"spoolman-go/ent/filamentfield"
	"spoolman-go/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FilamentFieldQuery is the builder for querying FilamentField entities.
type FilamentFieldQuery struct {
	config
	ctx          *QueryContext
	order        []filamentfield.OrderOption
	inters       []Interceptor
	predicates   []predicate.FilamentField
	withFilament *FilamentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FilamentFieldQuery builder.
func (ffq *FilamentFieldQuery) Where(ps ...predicate.FilamentField) *FilamentFieldQuery {
	ffq.predicates = append(ffq.predicates, ps...)
	return ffq
}

// Limit the number of records to be returned by this query.
func (ffq *FilamentFieldQuery) Limit(limit int) *FilamentFieldQuery {
	ffq.ctx.Limit = &limit
	return ffq
}

// Offset to start from.
func (ffq *FilamentFieldQuery) Offset(offset int) *FilamentFieldQuery {
	ffq.ctx.Offset = &offset
	return ffq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ffq *FilamentFieldQuery) Unique(unique bool) *FilamentFieldQuery {
	ffq.ctx.Unique = &unique
	return ffq
}

// Order specifies how the records should be ordered.
func (ffq *FilamentFieldQuery) Order(o ...filamentfield.OrderOption) *FilamentFieldQuery {
	ffq.order = append(ffq.order, o...)
	return ffq
}

// QueryFilament chains the current query on the "filament" edge.
func (ffq *FilamentFieldQuery) QueryFilament() *FilamentQuery {
	query := (&FilamentClient{config: ffq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ffq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ffq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(filamentfield.Table, filamentfield.FieldID, selector),
			sqlgraph.To(filament.Table, filament.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, filamentfield.FilamentTable, filamentfield.FilamentColumn),
		)
		fromU = sqlgraph.SetNeighbors(ffq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FilamentField entity from the query.
// Returns a *NotFoundError when no FilamentField was found.
func (ffq *FilamentFieldQuery) First(ctx context.Context) (*FilamentField, error) {
	nodes, err := ffq.Limit(1).All(setContextOp(ctx, ffq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{filamentfield.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ffq *FilamentFieldQuery) FirstX(ctx context.Context) *FilamentField {
	node, err := ffq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FilamentField ID from the query.
// Returns a *NotFoundError when no FilamentField ID was found.
func (ffq *FilamentFieldQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ffq.Limit(1).IDs(setContextOp(ctx, ffq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{filamentfield.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ffq *FilamentFieldQuery) FirstIDX(ctx context.Context) int {
	id, err := ffq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FilamentField entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FilamentField entity is found.
// Returns a *NotFoundError when no FilamentField entities are found.
func (ffq *FilamentFieldQuery) Only(ctx context.Context) (*FilamentField, error) {
	nodes, err := ffq.Limit(2).All(setContextOp(ctx, ffq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{filamentfield.Label}
	default:
		return nil, &NotSingularError{filamentfield.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ffq *FilamentFieldQuery) OnlyX(ctx context.Context) *FilamentField {
	node, err := ffq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FilamentField ID in the query.
// Returns a *NotSingularError when more than one FilamentField ID is found.
// Returns a *NotFoundError when no entities are found.
func (ffq *FilamentFieldQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ffq.Limit(2).IDs(setContextOp(ctx, ffq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{filamentfield.Label}
	default:
		err = &NotSingularError{filamentfield.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ffq *FilamentFieldQuery) OnlyIDX(ctx context.Context) int {
	id, err := ffq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FilamentFields.
func (ffq *FilamentFieldQuery) All(ctx context.Context) ([]*FilamentField, error) {
	ctx = setContextOp(ctx, ffq.ctx, ent.OpQueryAll)
	if err := ffq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FilamentField, *FilamentFieldQuery]()
	return withInterceptors[[]*FilamentField](ctx, ffq, qr, ffq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ffq *FilamentFieldQuery) AllX(ctx context.Context) []*FilamentField {
	nodes, err := ffq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FilamentField IDs.
func (ffq *FilamentFieldQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ffq.ctx.Unique == nil && ffq.path != nil {
		ffq.Unique(true)
	}
	ctx = setContextOp(ctx, ffq.ctx, ent.OpQueryIDs)
	if err = ffq.Select(filamentfield.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ffq *FilamentFieldQuery) IDsX(ctx context.Context) []int {
	ids, err := ffq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ffq *FilamentFieldQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ffq.ctx, ent.OpQueryCount)
	if err := ffq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ffq, querierCount[*FilamentFieldQuery](), ffq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ffq *FilamentFieldQuery) CountX(ctx context.Context) int {
	count, err := ffq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ffq *FilamentFieldQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ffq.ctx, ent.OpQueryExist)
	switch _, err := ffq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ffq *FilamentFieldQuery) ExistX(ctx context.Context) bool {
	exist, err := ffq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FilamentFieldQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ffq *FilamentFieldQuery) Clone() *FilamentFieldQuery {
	if ffq == nil {
		return nil
	}
	return &FilamentFieldQuery{
		config:       ffq.config,
		ctx:          ffq.ctx.Clone(),
		order:        append([]filamentfield.OrderOption{}, ffq.order...),
		inters:       append([]Interceptor{}, ffq.inters...),
		predicates:   append([]predicate.FilamentField{}, ffq.predicates...),
		withFilament: ffq.withFilament.Clone(),
		// clone intermediate query.
		sql:  ffq.sql.Clone(),
		path: ffq.path,
	}
}

// WithFilament tells the query-builder to eager-load the nodes that are connected to
// the "filament" edge. The optional arguments are used to configure the query builder of the edge.
func (ffq *FilamentFieldQuery) WithFilament(opts ...func(*FilamentQuery)) *FilamentFieldQuery {
	query := (&FilamentClient{config: ffq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ffq.withFilament = query
	return ffq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		FilamentID int `json:"filament_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FilamentField.Query().
//		GroupBy(filamentfield.FieldFilamentID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ffq *FilamentFieldQuery) GroupBy(field string, fields ...string) *FilamentFieldGroupBy {
	ffq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FilamentFieldGroupBy{build: ffq}
	grbuild.flds = &ffq.ctx.Fields
	grbuild.label = filamentfield.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		FilamentID int `json:"filament_id,omitempty"`
//	}
//
//	client.FilamentField.Query().
//		Select(filamentfield.FieldFilamentID).
//		Scan(ctx, &v)
func (ffq *FilamentFieldQuery) Select(fields ...string) *FilamentFieldSelect {
	ffq.ctx.Fields = append(ffq.ctx.Fields, fields...)
	sbuild := &FilamentFieldSelect{FilamentFieldQuery: ffq}
	sbuild.label = filamentfield.Label
	sbuild.flds, sbuild.scan = &ffq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FilamentFieldSelect configured with the given aggregations.
func (ffq *FilamentFieldQuery) Aggregate(fns ...AggregateFunc) *FilamentFieldSelect {
	return ffq.Select().Aggregate(fns...)
}

func (ffq *FilamentFieldQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ffq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ffq); err != nil {
				return err
			}
		}
	}
	for _, f := range ffq.ctx.Fields {
		if !filamentfield.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ffq.path != nil {
		prev, err := ffq.path(ctx)
		if err != nil {
			return err
		}
		ffq.sql = prev
	}
	return nil
}

func (ffq *FilamentFieldQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FilamentField, error) {
	var (
		nodes       = []*FilamentField{}
		_spec       = ffq.querySpec()
		loadedTypes = [1]bool{
			ffq.withFilament != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FilamentField).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FilamentField{config: ffq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ffq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ffq.withFilament; query != nil {
		if err := ffq.loadFilament(ctx, query, nodes, nil,
			func(n *FilamentField, e *Filament) { n.Edges.Filament = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ffq *FilamentFieldQuery) loadFilament(ctx context.Context, query *FilamentQuery, nodes []*FilamentField, init func(*FilamentField), assign func(*FilamentField, *Filament)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*FilamentField)
	for i := range nodes {
		fk := nodes[i].FilamentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(filament.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "filament_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ffq *FilamentFieldQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ffq.querySpec()
	_spec.Node.Columns = ffq.ctx.Fields
	if len(ffq.ctx.Fields) > 0 {
		_spec.Unique = ffq.ctx.Unique != nil && *ffq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ffq.driver, _spec)
}

func (ffq *FilamentFieldQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(filamentfield.Table, filamentfield.Columns, sqlgraph.NewFieldSpec(filamentfield.FieldID, field.TypeInt))
	_spec.From = ffq.sql
	if unique := ffq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ffq.path != nil {
		_spec.Unique = true
	}
	if fields := ffq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filamentfield.FieldID)
		for i := range fields {
			if fields[i] != filamentfield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ffq.withFilament != nil {
			_spec.Node.AddColumnOnce(filamentfield.FieldFilamentID)
		}
	}
	if ps := ffq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ffq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ffq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ffq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ffq *FilamentFieldQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ffq.driver.Dialect())
	t1 := builder.Table(filamentfield.Table)
	columns := ffq.ctx.Fields
	if len(columns) == 0 {
		columns = filamentfield.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ffq.sql != nil {
		selector = ffq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ffq.ctx.Unique != nil && *ffq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ffq.predicates {
		p(selector)
	}
	for _, p := range ffq.order {
		p(selector)
	}
	if offset := ffq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ffq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FilamentFieldGroupBy is the group-by builder for FilamentField entities.
type FilamentFieldGroupBy struct {
	selector
	build *FilamentFieldQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ffgb *FilamentFieldGroupBy) Aggregate(fns ...AggregateFunc) *FilamentFieldGroupBy {
	ffgb.fns = append(ffgb.fns, fns...)
	return ffgb
}

// Scan applies the selector query and scans the result into the given value.
func (ffgb *FilamentFieldGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ffgb.build.ctx, ent.OpQueryGroupBy)
	if err := ffgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FilamentFieldQuery, *FilamentFieldGroupBy](ctx, ffgb.build, ffgb, ffgb.build.inters, v)
}

func (ffgb *FilamentFieldGroupBy) sqlScan(ctx context.Context, root *FilamentFieldQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ffgb.fns))
	for _, fn := range ffgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ffgb.flds)+len(ffgb.fns))
		for _, f := range *ffgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ffgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ffgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FilamentFieldSelect is the builder for selecting fields of FilamentField entities.
type FilamentFieldSelect struct {
	*FilamentFieldQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ffs *FilamentFieldSelect) Aggregate(fns ...AggregateFunc) *FilamentFieldSelect {
	ffs.fns = append(ffs.fns, fns...)
	return ffs
}

// Scan applies the selector query and scans the result into the given value.
func (ffs *FilamentFieldSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ffs.ctx, ent.OpQuerySelect)
	if err := ffs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FilamentFieldQuery, *FilamentFieldSelect](ctx, ffs.FilamentFieldQuery, ffs, ffs.inters, v)
}

func (ffs *FilamentFieldSelect) sqlScan(ctx context.Context, root *FilamentFieldQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ffs.fns))
	for _, fn := range ffs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ffs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ffs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
