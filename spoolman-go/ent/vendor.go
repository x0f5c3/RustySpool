// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"spoolman-go/ent/vendor"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Vendor is the model entity for the Vendor schema.
type Vendor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Registered holds the value of the "registered" field.
	Registered time.Time `json:"registered,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EmptySpoolWeight holds the value of the "empty_spool_weight" field.
	EmptySpoolWeight float64 `json:"empty_spool_weight,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VendorQuery when eager-loading is set.
	Edges        VendorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VendorEdges holds the relations/edges for other nodes in the graph.
type VendorEdges struct {
	// Filaments holds the value of the filaments edge.
	Filaments []*Filament `json:"filaments,omitempty"`
	// Extra holds the value of the extra edge.
	Extra []*VendorField `json:"extra,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FilamentsOrErr returns the Filaments value or an error if the edge
// was not loaded in eager-loading.
func (e VendorEdges) FilamentsOrErr() ([]*Filament, error) {
	if e.loadedTypes[0] {
		return e.Filaments, nil
	}
	return nil, &NotLoadedError{edge: "filaments"}
}

// ExtraOrErr returns the Extra value or an error if the edge
// was not loaded in eager-loading.
func (e VendorEdges) ExtraOrErr() ([]*VendorField, error) {
	if e.loadedTypes[1] {
		return e.Extra, nil
	}
	return nil, &NotLoadedError{edge: "extra"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vendor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendor.FieldEmptySpoolWeight:
			values[i] = new(sql.NullFloat64)
		case vendor.FieldID:
			values[i] = new(sql.NullInt64)
		case vendor.FieldName, vendor.FieldComment, vendor.FieldExternalID:
			values[i] = new(sql.NullString)
		case vendor.FieldRegistered:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vendor fields.
func (v *Vendor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vendor.FieldRegistered:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field registered", values[i])
			} else if value.Valid {
				v.Registered = value.Time
			}
		case vendor.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		case vendor.FieldEmptySpoolWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field empty_spool_weight", values[i])
			} else if value.Valid {
				v.EmptySpoolWeight = value.Float64
			}
		case vendor.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				v.Comment = value.String
			}
		case vendor.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				v.ExternalID = value.String
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Vendor.
// This includes values selected through modifiers, order, etc.
func (v *Vendor) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryFilaments queries the "filaments" edge of the Vendor entity.
func (v *Vendor) QueryFilaments() *FilamentQuery {
	return NewVendorClient(v.config).QueryFilaments(v)
}

// QueryExtra queries the "extra" edge of the Vendor entity.
func (v *Vendor) QueryExtra() *VendorFieldQuery {
	return NewVendorClient(v.config).QueryExtra(v)
}

// Update returns a builder for updating this Vendor.
// Note that you need to call Vendor.Unwrap() before calling this method if this Vendor
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vendor) Update() *VendorUpdateOne {
	return NewVendorClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Vendor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vendor) Unwrap() *Vendor {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vendor is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vendor) String() string {
	var builder strings.Builder
	builder.WriteString("Vendor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("registered=")
	builder.WriteString(v.Registered.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(v.Name)
	builder.WriteString(", ")
	builder.WriteString("empty_spool_weight=")
	builder.WriteString(fmt.Sprintf("%v", v.EmptySpoolWeight))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(v.Comment)
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(v.ExternalID)
	builder.WriteByte(')')
	return builder.String()
}

// Vendors is a parsable slice of Vendor.
type Vendors []*Vendor
