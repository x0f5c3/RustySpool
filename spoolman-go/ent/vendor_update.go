// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spoolman-go/ent/filament"
	"spoolman-go/ent/predicate"
	"spoolman-go/ent/vendor"
	"spoolman-go/ent/vendorfield"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VendorUpdate is the builder for updating Vendor entities.
type VendorUpdate struct {
	config
	hooks    []Hook
	mutation *VendorMutation
}

// Where appends a list predicates to the VendorUpdate builder.
func (vu *VendorUpdate) Where(ps ...predicate.Vendor) *VendorUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetRegistered sets the "registered" field.
func (vu *VendorUpdate) SetRegistered(t time.Time) *VendorUpdate {
	vu.mutation.SetRegistered(t)
	return vu
}

// SetNillableRegistered sets the "registered" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableRegistered(t *time.Time) *VendorUpdate {
	if t != nil {
		vu.SetRegistered(*t)
	}
	return vu
}

// SetName sets the "name" field.
func (vu *VendorUpdate) SetName(s string) *VendorUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableName(s *string) *VendorUpdate {
	if s != nil {
		vu.SetName(*s)
	}
	return vu
}

// SetEmptySpoolWeight sets the "empty_spool_weight" field.
func (vu *VendorUpdate) SetEmptySpoolWeight(f float64) *VendorUpdate {
	vu.mutation.ResetEmptySpoolWeight()
	vu.mutation.SetEmptySpoolWeight(f)
	return vu
}

// SetNillableEmptySpoolWeight sets the "empty_spool_weight" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableEmptySpoolWeight(f *float64) *VendorUpdate {
	if f != nil {
		vu.SetEmptySpoolWeight(*f)
	}
	return vu
}

// AddEmptySpoolWeight adds f to the "empty_spool_weight" field.
func (vu *VendorUpdate) AddEmptySpoolWeight(f float64) *VendorUpdate {
	vu.mutation.AddEmptySpoolWeight(f)
	return vu
}

// ClearEmptySpoolWeight clears the value of the "empty_spool_weight" field.
func (vu *VendorUpdate) ClearEmptySpoolWeight() *VendorUpdate {
	vu.mutation.ClearEmptySpoolWeight()
	return vu
}

// SetComment sets the "comment" field.
func (vu *VendorUpdate) SetComment(s string) *VendorUpdate {
	vu.mutation.SetComment(s)
	return vu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableComment(s *string) *VendorUpdate {
	if s != nil {
		vu.SetComment(*s)
	}
	return vu
}

// ClearComment clears the value of the "comment" field.
func (vu *VendorUpdate) ClearComment() *VendorUpdate {
	vu.mutation.ClearComment()
	return vu
}

// SetExternalID sets the "external_id" field.
func (vu *VendorUpdate) SetExternalID(s string) *VendorUpdate {
	vu.mutation.SetExternalID(s)
	return vu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableExternalID(s *string) *VendorUpdate {
	if s != nil {
		vu.SetExternalID(*s)
	}
	return vu
}

// ClearExternalID clears the value of the "external_id" field.
func (vu *VendorUpdate) ClearExternalID() *VendorUpdate {
	vu.mutation.ClearExternalID()
	return vu
}

// AddFilamentIDs adds the "filaments" edge to the Filament entity by IDs.
func (vu *VendorUpdate) AddFilamentIDs(ids ...int) *VendorUpdate {
	vu.mutation.AddFilamentIDs(ids...)
	return vu
}

// AddFilaments adds the "filaments" edges to the Filament entity.
func (vu *VendorUpdate) AddFilaments(f ...*Filament) *VendorUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return vu.AddFilamentIDs(ids...)
}

// AddExtraIDs adds the "extra" edge to the VendorField entity by IDs.
func (vu *VendorUpdate) AddExtraIDs(ids ...int) *VendorUpdate {
	vu.mutation.AddExtraIDs(ids...)
	return vu
}

// AddExtra adds the "extra" edges to the VendorField entity.
func (vu *VendorUpdate) AddExtra(v ...*VendorField) *VendorUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.AddExtraIDs(ids...)
}

// Mutation returns the VendorMutation object of the builder.
func (vu *VendorUpdate) Mutation() *VendorMutation {
	return vu.mutation
}

// ClearFilaments clears all "filaments" edges to the Filament entity.
func (vu *VendorUpdate) ClearFilaments() *VendorUpdate {
	vu.mutation.ClearFilaments()
	return vu
}

// RemoveFilamentIDs removes the "filaments" edge to Filament entities by IDs.
func (vu *VendorUpdate) RemoveFilamentIDs(ids ...int) *VendorUpdate {
	vu.mutation.RemoveFilamentIDs(ids...)
	return vu
}

// RemoveFilaments removes "filaments" edges to Filament entities.
func (vu *VendorUpdate) RemoveFilaments(f ...*Filament) *VendorUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return vu.RemoveFilamentIDs(ids...)
}

// ClearExtra clears all "extra" edges to the VendorField entity.
func (vu *VendorUpdate) ClearExtra() *VendorUpdate {
	vu.mutation.ClearExtra()
	return vu
}

// RemoveExtraIDs removes the "extra" edge to VendorField entities by IDs.
func (vu *VendorUpdate) RemoveExtraIDs(ids ...int) *VendorUpdate {
	vu.mutation.RemoveExtraIDs(ids...)
	return vu
}

// RemoveExtra removes "extra" edges to VendorField entities.
func (vu *VendorUpdate) RemoveExtra(v ...*VendorField) *VendorUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.RemoveExtraIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VendorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VendorUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VendorUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VendorUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VendorUpdate) check() error {
	if v, ok := vu.mutation.Name(); ok {
		if err := vendor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Vendor.name": %w`, err)}
		}
	}
	if v, ok := vu.mutation.Comment(); ok {
		if err := vendor.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Vendor.comment": %w`, err)}
		}
	}
	if v, ok := vu.mutation.ExternalID(); ok {
		if err := vendor.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "Vendor.external_id": %w`, err)}
		}
	}
	return nil
}

func (vu *VendorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendor.Table, vendor.Columns, sqlgraph.NewFieldSpec(vendor.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Registered(); ok {
		_spec.SetField(vendor.FieldRegistered, field.TypeTime, value)
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.SetField(vendor.FieldName, field.TypeString, value)
	}
	if value, ok := vu.mutation.EmptySpoolWeight(); ok {
		_spec.SetField(vendor.FieldEmptySpoolWeight, field.TypeFloat64, value)
	}
	if value, ok := vu.mutation.AddedEmptySpoolWeight(); ok {
		_spec.AddField(vendor.FieldEmptySpoolWeight, field.TypeFloat64, value)
	}
	if vu.mutation.EmptySpoolWeightCleared() {
		_spec.ClearField(vendor.FieldEmptySpoolWeight, field.TypeFloat64)
	}
	if value, ok := vu.mutation.Comment(); ok {
		_spec.SetField(vendor.FieldComment, field.TypeString, value)
	}
	if vu.mutation.CommentCleared() {
		_spec.ClearField(vendor.FieldComment, field.TypeString)
	}
	if value, ok := vu.mutation.ExternalID(); ok {
		_spec.SetField(vendor.FieldExternalID, field.TypeString, value)
	}
	if vu.mutation.ExternalIDCleared() {
		_spec.ClearField(vendor.FieldExternalID, field.TypeString)
	}
	if vu.mutation.FilamentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.FilamentsTable,
			Columns: []string{vendor.FilamentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedFilamentsIDs(); len(nodes) > 0 && !vu.mutation.FilamentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.FilamentsTable,
			Columns: []string{vendor.FilamentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.FilamentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.FilamentsTable,
			Columns: []string{vendor.FilamentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.ExtraTable,
			Columns: []string{vendor.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedExtraIDs(); len(nodes) > 0 && !vu.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.ExtraTable,
			Columns: []string{vendor.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ExtraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.ExtraTable,
			Columns: []string{vendor.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VendorUpdateOne is the builder for updating a single Vendor entity.
type VendorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VendorMutation
}

// SetRegistered sets the "registered" field.
func (vuo *VendorUpdateOne) SetRegistered(t time.Time) *VendorUpdateOne {
	vuo.mutation.SetRegistered(t)
	return vuo
}

// SetNillableRegistered sets the "registered" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableRegistered(t *time.Time) *VendorUpdateOne {
	if t != nil {
		vuo.SetRegistered(*t)
	}
	return vuo
}

// SetName sets the "name" field.
func (vuo *VendorUpdateOne) SetName(s string) *VendorUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableName(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetName(*s)
	}
	return vuo
}

// SetEmptySpoolWeight sets the "empty_spool_weight" field.
func (vuo *VendorUpdateOne) SetEmptySpoolWeight(f float64) *VendorUpdateOne {
	vuo.mutation.ResetEmptySpoolWeight()
	vuo.mutation.SetEmptySpoolWeight(f)
	return vuo
}

// SetNillableEmptySpoolWeight sets the "empty_spool_weight" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableEmptySpoolWeight(f *float64) *VendorUpdateOne {
	if f != nil {
		vuo.SetEmptySpoolWeight(*f)
	}
	return vuo
}

// AddEmptySpoolWeight adds f to the "empty_spool_weight" field.
func (vuo *VendorUpdateOne) AddEmptySpoolWeight(f float64) *VendorUpdateOne {
	vuo.mutation.AddEmptySpoolWeight(f)
	return vuo
}

// ClearEmptySpoolWeight clears the value of the "empty_spool_weight" field.
func (vuo *VendorUpdateOne) ClearEmptySpoolWeight() *VendorUpdateOne {
	vuo.mutation.ClearEmptySpoolWeight()
	return vuo
}

// SetComment sets the "comment" field.
func (vuo *VendorUpdateOne) SetComment(s string) *VendorUpdateOne {
	vuo.mutation.SetComment(s)
	return vuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableComment(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetComment(*s)
	}
	return vuo
}

// ClearComment clears the value of the "comment" field.
func (vuo *VendorUpdateOne) ClearComment() *VendorUpdateOne {
	vuo.mutation.ClearComment()
	return vuo
}

// SetExternalID sets the "external_id" field.
func (vuo *VendorUpdateOne) SetExternalID(s string) *VendorUpdateOne {
	vuo.mutation.SetExternalID(s)
	return vuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableExternalID(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetExternalID(*s)
	}
	return vuo
}

// ClearExternalID clears the value of the "external_id" field.
func (vuo *VendorUpdateOne) ClearExternalID() *VendorUpdateOne {
	vuo.mutation.ClearExternalID()
	return vuo
}

// AddFilamentIDs adds the "filaments" edge to the Filament entity by IDs.
func (vuo *VendorUpdateOne) AddFilamentIDs(ids ...int) *VendorUpdateOne {
	vuo.mutation.AddFilamentIDs(ids...)
	return vuo
}

// AddFilaments adds the "filaments" edges to the Filament entity.
func (vuo *VendorUpdateOne) AddFilaments(f ...*Filament) *VendorUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return vuo.AddFilamentIDs(ids...)
}

// AddExtraIDs adds the "extra" edge to the VendorField entity by IDs.
func (vuo *VendorUpdateOne) AddExtraIDs(ids ...int) *VendorUpdateOne {
	vuo.mutation.AddExtraIDs(ids...)
	return vuo
}

// AddExtra adds the "extra" edges to the VendorField entity.
func (vuo *VendorUpdateOne) AddExtra(v ...*VendorField) *VendorUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.AddExtraIDs(ids...)
}

// Mutation returns the VendorMutation object of the builder.
func (vuo *VendorUpdateOne) Mutation() *VendorMutation {
	return vuo.mutation
}

// ClearFilaments clears all "filaments" edges to the Filament entity.
func (vuo *VendorUpdateOne) ClearFilaments() *VendorUpdateOne {
	vuo.mutation.ClearFilaments()
	return vuo
}

// RemoveFilamentIDs removes the "filaments" edge to Filament entities by IDs.
func (vuo *VendorUpdateOne) RemoveFilamentIDs(ids ...int) *VendorUpdateOne {
	vuo.mutation.RemoveFilamentIDs(ids...)
	return vuo
}

// RemoveFilaments removes "filaments" edges to Filament entities.
func (vuo *VendorUpdateOne) RemoveFilaments(f ...*Filament) *VendorUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return vuo.RemoveFilamentIDs(ids...)
}

// ClearExtra clears all "extra" edges to the VendorField entity.
func (vuo *VendorUpdateOne) ClearExtra() *VendorUpdateOne {
	vuo.mutation.ClearExtra()
	return vuo
}

// RemoveExtraIDs removes the "extra" edge to VendorField entities by IDs.
func (vuo *VendorUpdateOne) RemoveExtraIDs(ids ...int) *VendorUpdateOne {
	vuo.mutation.RemoveExtraIDs(ids...)
	return vuo
}

// RemoveExtra removes "extra" edges to VendorField entities.
func (vuo *VendorUpdateOne) RemoveExtra(v ...*VendorField) *VendorUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.RemoveExtraIDs(ids...)
}

// Where appends a list predicates to the VendorUpdate builder.
func (vuo *VendorUpdateOne) Where(ps ...predicate.Vendor) *VendorUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VendorUpdateOne) Select(field string, fields ...string) *VendorUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vendor entity.
func (vuo *VendorUpdateOne) Save(ctx context.Context) (*Vendor, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VendorUpdateOne) SaveX(ctx context.Context) *Vendor {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VendorUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VendorUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VendorUpdateOne) check() error {
	if v, ok := vuo.mutation.Name(); ok {
		if err := vendor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Vendor.name": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.Comment(); ok {
		if err := vendor.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Vendor.comment": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.ExternalID(); ok {
		if err := vendor.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "Vendor.external_id": %w`, err)}
		}
	}
	return nil
}

func (vuo *VendorUpdateOne) sqlSave(ctx context.Context) (_node *Vendor, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendor.Table, vendor.Columns, sqlgraph.NewFieldSpec(vendor.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vendor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendor.FieldID)
		for _, f := range fields {
			if !vendor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vendor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Registered(); ok {
		_spec.SetField(vendor.FieldRegistered, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.SetField(vendor.FieldName, field.TypeString, value)
	}
	if value, ok := vuo.mutation.EmptySpoolWeight(); ok {
		_spec.SetField(vendor.FieldEmptySpoolWeight, field.TypeFloat64, value)
	}
	if value, ok := vuo.mutation.AddedEmptySpoolWeight(); ok {
		_spec.AddField(vendor.FieldEmptySpoolWeight, field.TypeFloat64, value)
	}
	if vuo.mutation.EmptySpoolWeightCleared() {
		_spec.ClearField(vendor.FieldEmptySpoolWeight, field.TypeFloat64)
	}
	if value, ok := vuo.mutation.Comment(); ok {
		_spec.SetField(vendor.FieldComment, field.TypeString, value)
	}
	if vuo.mutation.CommentCleared() {
		_spec.ClearField(vendor.FieldComment, field.TypeString)
	}
	if value, ok := vuo.mutation.ExternalID(); ok {
		_spec.SetField(vendor.FieldExternalID, field.TypeString, value)
	}
	if vuo.mutation.ExternalIDCleared() {
		_spec.ClearField(vendor.FieldExternalID, field.TypeString)
	}
	if vuo.mutation.FilamentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.FilamentsTable,
			Columns: []string{vendor.FilamentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedFilamentsIDs(); len(nodes) > 0 && !vuo.mutation.FilamentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.FilamentsTable,
			Columns: []string{vendor.FilamentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.FilamentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.FilamentsTable,
			Columns: []string{vendor.FilamentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.ExtraTable,
			Columns: []string{vendor.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedExtraIDs(); len(nodes) > 0 && !vuo.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.ExtraTable,
			Columns: []string{vendor.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ExtraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.ExtraTable,
			Columns: []string{vendor.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vendor{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
