// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spoolman-go/ent/filament"
	"spoolman-go/ent/vendor"
	"spoolman-go/ent/vendorfield"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VendorCreate is the builder for creating a Vendor entity.
type VendorCreate struct {
	config
	mutation *VendorMutation
	hooks    []Hook
}

// SetRegistered sets the "registered" field.
func (vc *VendorCreate) SetRegistered(t time.Time) *VendorCreate {
	vc.mutation.SetRegistered(t)
	return vc
}

// SetName sets the "name" field.
func (vc *VendorCreate) SetName(s string) *VendorCreate {
	vc.mutation.SetName(s)
	return vc
}

// SetEmptySpoolWeight sets the "empty_spool_weight" field.
func (vc *VendorCreate) SetEmptySpoolWeight(f float64) *VendorCreate {
	vc.mutation.SetEmptySpoolWeight(f)
	return vc
}

// SetNillableEmptySpoolWeight sets the "empty_spool_weight" field if the given value is not nil.
func (vc *VendorCreate) SetNillableEmptySpoolWeight(f *float64) *VendorCreate {
	if f != nil {
		vc.SetEmptySpoolWeight(*f)
	}
	return vc
}

// SetComment sets the "comment" field.
func (vc *VendorCreate) SetComment(s string) *VendorCreate {
	vc.mutation.SetComment(s)
	return vc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (vc *VendorCreate) SetNillableComment(s *string) *VendorCreate {
	if s != nil {
		vc.SetComment(*s)
	}
	return vc
}

// SetExternalID sets the "external_id" field.
func (vc *VendorCreate) SetExternalID(s string) *VendorCreate {
	vc.mutation.SetExternalID(s)
	return vc
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (vc *VendorCreate) SetNillableExternalID(s *string) *VendorCreate {
	if s != nil {
		vc.SetExternalID(*s)
	}
	return vc
}

// SetID sets the "id" field.
func (vc *VendorCreate) SetID(i int) *VendorCreate {
	vc.mutation.SetID(i)
	return vc
}

// AddFilamentIDs adds the "filaments" edge to the Filament entity by IDs.
func (vc *VendorCreate) AddFilamentIDs(ids ...int) *VendorCreate {
	vc.mutation.AddFilamentIDs(ids...)
	return vc
}

// AddFilaments adds the "filaments" edges to the Filament entity.
func (vc *VendorCreate) AddFilaments(f ...*Filament) *VendorCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return vc.AddFilamentIDs(ids...)
}

// AddExtraIDs adds the "extra" edge to the VendorField entity by IDs.
func (vc *VendorCreate) AddExtraIDs(ids ...int) *VendorCreate {
	vc.mutation.AddExtraIDs(ids...)
	return vc
}

// AddExtra adds the "extra" edges to the VendorField entity.
func (vc *VendorCreate) AddExtra(v ...*VendorField) *VendorCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vc.AddExtraIDs(ids...)
}

// Mutation returns the VendorMutation object of the builder.
func (vc *VendorCreate) Mutation() *VendorMutation {
	return vc.mutation
}

// Save creates the Vendor in the database.
func (vc *VendorCreate) Save(ctx context.Context) (*Vendor, error) {
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VendorCreate) SaveX(ctx context.Context) *Vendor {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VendorCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VendorCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VendorCreate) check() error {
	if _, ok := vc.mutation.Registered(); !ok {
		return &ValidationError{Name: "registered", err: errors.New(`ent: missing required field "Vendor.registered"`)}
	}
	if _, ok := vc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Vendor.name"`)}
	}
	if v, ok := vc.mutation.Name(); ok {
		if err := vendor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Vendor.name": %w`, err)}
		}
	}
	if v, ok := vc.mutation.Comment(); ok {
		if err := vendor.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Vendor.comment": %w`, err)}
		}
	}
	if v, ok := vc.mutation.ExternalID(); ok {
		if err := vendor.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "Vendor.external_id": %w`, err)}
		}
	}
	if v, ok := vc.mutation.ID(); ok {
		if err := vendor.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Vendor.id": %w`, err)}
		}
	}
	return nil
}

func (vc *VendorCreate) sqlSave(ctx context.Context) (*Vendor, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VendorCreate) createSpec() (*Vendor, *sqlgraph.CreateSpec) {
	var (
		_node = &Vendor{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(vendor.Table, sqlgraph.NewFieldSpec(vendor.FieldID, field.TypeInt))
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vc.mutation.Registered(); ok {
		_spec.SetField(vendor.FieldRegistered, field.TypeTime, value)
		_node.Registered = value
	}
	if value, ok := vc.mutation.Name(); ok {
		_spec.SetField(vendor.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := vc.mutation.EmptySpoolWeight(); ok {
		_spec.SetField(vendor.FieldEmptySpoolWeight, field.TypeFloat64, value)
		_node.EmptySpoolWeight = value
	}
	if value, ok := vc.mutation.Comment(); ok {
		_spec.SetField(vendor.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := vc.mutation.ExternalID(); ok {
		_spec.SetField(vendor.FieldExternalID, field.TypeString, value)
		_node.ExternalID = value
	}
	if nodes := vc.mutation.FilamentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.FilamentsTable,
			Columns: []string{vendor.FilamentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.ExtraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.ExtraTable,
			Columns: []string{vendor.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VendorCreateBulk is the builder for creating many Vendor entities in bulk.
type VendorCreateBulk struct {
	config
	err      error
	builders []*VendorCreate
}

// Save creates the Vendor entities in the database.
func (vcb *VendorCreateBulk) Save(ctx context.Context) ([]*Vendor, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vendor, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VendorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VendorCreateBulk) SaveX(ctx context.Context) []*Vendor {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VendorCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VendorCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
