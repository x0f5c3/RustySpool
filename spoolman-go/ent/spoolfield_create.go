// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spoolman-go/ent/spool"
	"spoolman-go/ent/spoolfield"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpoolFieldCreate is the builder for creating a SpoolField entity.
type SpoolFieldCreate struct {
	config
	mutation *SpoolFieldMutation
	hooks    []Hook
}

// SetSpoolID sets the "spool_id" field.
func (sfc *SpoolFieldCreate) SetSpoolID(i int) *SpoolFieldCreate {
	sfc.mutation.SetSpoolID(i)
	return sfc
}

// SetKey sets the "key" field.
func (sfc *SpoolFieldCreate) SetKey(s string) *SpoolFieldCreate {
	sfc.mutation.SetKey(s)
	return sfc
}

// SetValue sets the "value" field.
func (sfc *SpoolFieldCreate) SetValue(s string) *SpoolFieldCreate {
	sfc.mutation.SetValue(s)
	return sfc
}

// SetSpool sets the "spool" edge to the Spool entity.
func (sfc *SpoolFieldCreate) SetSpool(s *Spool) *SpoolFieldCreate {
	return sfc.SetSpoolID(s.ID)
}

// Mutation returns the SpoolFieldMutation object of the builder.
func (sfc *SpoolFieldCreate) Mutation() *SpoolFieldMutation {
	return sfc.mutation
}

// Save creates the SpoolField in the database.
func (sfc *SpoolFieldCreate) Save(ctx context.Context) (*SpoolField, error) {
	return withHooks(ctx, sfc.sqlSave, sfc.mutation, sfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sfc *SpoolFieldCreate) SaveX(ctx context.Context) *SpoolField {
	v, err := sfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sfc *SpoolFieldCreate) Exec(ctx context.Context) error {
	_, err := sfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfc *SpoolFieldCreate) ExecX(ctx context.Context) {
	if err := sfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfc *SpoolFieldCreate) check() error {
	if _, ok := sfc.mutation.SpoolID(); !ok {
		return &ValidationError{Name: "spool_id", err: errors.New(`ent: missing required field "SpoolField.spool_id"`)}
	}
	if _, ok := sfc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "SpoolField.key"`)}
	}
	if v, ok := sfc.mutation.Key(); ok {
		if err := spoolfield.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "SpoolField.key": %w`, err)}
		}
	}
	if _, ok := sfc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "SpoolField.value"`)}
	}
	if len(sfc.mutation.SpoolIDs()) == 0 {
		return &ValidationError{Name: "spool", err: errors.New(`ent: missing required edge "SpoolField.spool"`)}
	}
	return nil
}

func (sfc *SpoolFieldCreate) sqlSave(ctx context.Context) (*SpoolField, error) {
	if err := sfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sfc.mutation.id = &_node.ID
	sfc.mutation.done = true
	return _node, nil
}

func (sfc *SpoolFieldCreate) createSpec() (*SpoolField, *sqlgraph.CreateSpec) {
	var (
		_node = &SpoolField{config: sfc.config}
		_spec = sqlgraph.NewCreateSpec(spoolfield.Table, sqlgraph.NewFieldSpec(spoolfield.FieldID, field.TypeInt))
	)
	if value, ok := sfc.mutation.Key(); ok {
		_spec.SetField(spoolfield.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := sfc.mutation.Value(); ok {
		_spec.SetField(spoolfield.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := sfc.mutation.SpoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spoolfield.SpoolTable,
			Columns: []string{spoolfield.SpoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SpoolID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SpoolFieldCreateBulk is the builder for creating many SpoolField entities in bulk.
type SpoolFieldCreateBulk struct {
	config
	err      error
	builders []*SpoolFieldCreate
}

// Save creates the SpoolField entities in the database.
func (sfcb *SpoolFieldCreateBulk) Save(ctx context.Context) ([]*SpoolField, error) {
	if sfcb.err != nil {
		return nil, sfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sfcb.builders))
	nodes := make([]*SpoolField, len(sfcb.builders))
	mutators := make([]Mutator, len(sfcb.builders))
	for i := range sfcb.builders {
		func(i int, root context.Context) {
			builder := sfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpoolFieldMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sfcb *SpoolFieldCreateBulk) SaveX(ctx context.Context) []*SpoolField {
	v, err := sfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sfcb *SpoolFieldCreateBulk) Exec(ctx context.Context) error {
	_, err := sfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfcb *SpoolFieldCreateBulk) ExecX(ctx context.Context) {
	if err := sfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
