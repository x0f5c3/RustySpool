// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spoolman-go/ent/filament"
	"spoolman-go/ent/filamentfield"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FilamentFieldCreate is the builder for creating a FilamentField entity.
type FilamentFieldCreate struct {
	config
	mutation *FilamentFieldMutation
	hooks    []Hook
}

// SetFilamentID sets the "filament_id" field.
func (ffc *FilamentFieldCreate) SetFilamentID(i int) *FilamentFieldCreate {
	ffc.mutation.SetFilamentID(i)
	return ffc
}

// SetKey sets the "key" field.
func (ffc *FilamentFieldCreate) SetKey(s string) *FilamentFieldCreate {
	ffc.mutation.SetKey(s)
	return ffc
}

// SetValue sets the "value" field.
func (ffc *FilamentFieldCreate) SetValue(s string) *FilamentFieldCreate {
	ffc.mutation.SetValue(s)
	return ffc
}

// SetFilament sets the "filament" edge to the Filament entity.
func (ffc *FilamentFieldCreate) SetFilament(f *Filament) *FilamentFieldCreate {
	return ffc.SetFilamentID(f.ID)
}

// Mutation returns the FilamentFieldMutation object of the builder.
func (ffc *FilamentFieldCreate) Mutation() *FilamentFieldMutation {
	return ffc.mutation
}

// Save creates the FilamentField in the database.
func (ffc *FilamentFieldCreate) Save(ctx context.Context) (*FilamentField, error) {
	return withHooks(ctx, ffc.sqlSave, ffc.mutation, ffc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ffc *FilamentFieldCreate) SaveX(ctx context.Context) *FilamentField {
	v, err := ffc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ffc *FilamentFieldCreate) Exec(ctx context.Context) error {
	_, err := ffc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffc *FilamentFieldCreate) ExecX(ctx context.Context) {
	if err := ffc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ffc *FilamentFieldCreate) check() error {
	if _, ok := ffc.mutation.FilamentID(); !ok {
		return &ValidationError{Name: "filament_id", err: errors.New(`ent: missing required field "FilamentField.filament_id"`)}
	}
	if _, ok := ffc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "FilamentField.key"`)}
	}
	if v, ok := ffc.mutation.Key(); ok {
		if err := filamentfield.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "FilamentField.key": %w`, err)}
		}
	}
	if _, ok := ffc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "FilamentField.value"`)}
	}
	if len(ffc.mutation.FilamentIDs()) == 0 {
		return &ValidationError{Name: "filament", err: errors.New(`ent: missing required edge "FilamentField.filament"`)}
	}
	return nil
}

func (ffc *FilamentFieldCreate) sqlSave(ctx context.Context) (*FilamentField, error) {
	if err := ffc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ffc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ffc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ffc.mutation.id = &_node.ID
	ffc.mutation.done = true
	return _node, nil
}

func (ffc *FilamentFieldCreate) createSpec() (*FilamentField, *sqlgraph.CreateSpec) {
	var (
		_node = &FilamentField{config: ffc.config}
		_spec = sqlgraph.NewCreateSpec(filamentfield.Table, sqlgraph.NewFieldSpec(filamentfield.FieldID, field.TypeInt))
	)
	if value, ok := ffc.mutation.Key(); ok {
		_spec.SetField(filamentfield.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := ffc.mutation.Value(); ok {
		_spec.SetField(filamentfield.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := ffc.mutation.FilamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filamentfield.FilamentTable,
			Columns: []string{filamentfield.FilamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FilamentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FilamentFieldCreateBulk is the builder for creating many FilamentField entities in bulk.
type FilamentFieldCreateBulk struct {
	config
	err      error
	builders []*FilamentFieldCreate
}

// Save creates the FilamentField entities in the database.
func (ffcb *FilamentFieldCreateBulk) Save(ctx context.Context) ([]*FilamentField, error) {
	if ffcb.err != nil {
		return nil, ffcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ffcb.builders))
	nodes := make([]*FilamentField, len(ffcb.builders))
	mutators := make([]Mutator, len(ffcb.builders))
	for i := range ffcb.builders {
		func(i int, root context.Context) {
			builder := ffcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FilamentFieldMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ffcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ffcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ffcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ffcb *FilamentFieldCreateBulk) SaveX(ctx context.Context) []*FilamentField {
	v, err := ffcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ffcb *FilamentFieldCreateBulk) Exec(ctx context.Context) error {
	_, err := ffcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffcb *FilamentFieldCreateBulk) ExecX(ctx context.Context) {
	if err := ffcb.Exec(ctx); err != nil {
		panic(err)
	}
}
