{
  "openapi": "3.1.0",
  "info": {
    "title": "Spoolman REST API v1",
    "description": "\n    REST API for Spoolman.\n\n    The API is served on the path `/api/v1/`.\n\n    Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data\n    that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket\n    endpoint that listens for changes to any data in the database.\n    ",
    "version": "1.0.0"
  },
  "paths": {
    "/info": {
      "get": {
        "summary": "Info",
        "description": "Return general info about the API.",
        "operationId": "info_info_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health",
        "description": "Return a health check.",
        "operationId": "health_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheck"
                }
              }
            }
          }
        }
      }
    },
    "/backup": {
      "post": {
        "summary": "Backup",
        "description": "Trigger a database backup. Only applicable for SQLite databases.",
        "operationId": "backup_backup_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/filament": {
      "get": {
        "tags": [
          "filament"
        ],
        "summary": "Find Filaments",
        "description": "Get a list of filaments that matches the search query. A websocket is served on the same path to listen for updates to any filament, or added or deleted filaments. See the HTTP Response code 299 for the content of the websocket messages.",
        "operationId": "Find_filaments_filament_get",
        "parameters": [
          {
            "name": "vendor_name",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Vendor Name",
              "description": "See vendor.name.",
              "deprecated": true,
              "type": "string",
              "nullable": true
            },
            "description": "See vendor.name.",
            "deprecated": true
          },
          {
            "name": "vendor_id",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Vendor ID",
              "description": "See vendor.id.",
              "deprecated": true,
              "type": "string",
              "pattern": "^-?\\d+(,-?\\d+)*$",
              "nullable": true
            },
            "description": "See vendor.id.",
            "deprecated": true
          },
          {
            "name": "vendor_dot_name",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Vendor Name",
              "description": "Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match filaments with no vendor name. Surround a term with quotes to search for the exact term.",
              "type": "string",
              "nullable": true
            },
            "description": "Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match filaments with no vendor name. Surround a term with quotes to search for the exact term."
          },
          {
            "name": "vendor_dot_id",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Vendor ID",
              "description": "Match an exact vendor ID. Separate multiple IDs with a comma. Specify -1 to match filaments with no vendor.",
              "examples": [
                "1",
                "1,2"
              ],
              "type": "string",
              "pattern": "^-?\\d+(,-?\\d+)*$",
              "nullable": true
            },
            "description": "Match an exact vendor ID. Separate multiple IDs with a comma. Specify -1 to match filaments with no vendor."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Filament Name",
              "description": "Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match filaments with no name. Surround a term with quotes to search for the exact term.",
              "type": "string",
              "nullable": true
            },
            "description": "Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match filaments with no name. Surround a term with quotes to search for the exact term."
          },
          {
            "name": "material",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Filament Material",
              "description": "Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match filaments with no material. Surround a term with quotes to search for the exact term.",
              "type": "string",
              "nullable": true
            },
            "description": "Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match filaments with no material. Surround a term with quotes to search for the exact term."
          },
          {
            "name": "article_number",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Filament Article Number",
              "description": "Partial case-insensitive search term for the filament article number. Separate multiple terms with a comma. Specify an empty string to match filaments with no article number. Surround a term with quotes to search for the exact term.",
              "type": "string",
              "nullable": true
            },
            "description": "Partial case-insensitive search term for the filament article number. Separate multiple terms with a comma. Specify an empty string to match filaments with no article number. Surround a term with quotes to search for the exact term."
          },
          {
            "name": "color_hex",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Filament Color",
              "description": "Match filament by similar color. Slow operation!",
              "type": "string",
              "nullable": true
            },
            "description": "Match filament by similar color. Slow operation!"
          },
          {
            "name": "color_similarity_threshold",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "description": "The similarity threshold for color matching. A value between 0.0-100.0, where 0 means match only exactly the same color.",
              "default": 20.0,
              "title": "Color Similarity Threshold"
            },
            "description": "The similarity threshold for color matching. A value between 0.0-100.0, where 0 means match only exactly the same color.",
            "example": 20.0
          },
          {
            "name": "external_id",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Find filaments imported by the given external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term.",
              "title": "External Id",
              "type": "string",
              "nullable": true
            },
            "description": "Find filaments imported by the given external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term.",
            "example": "polymaker_pla_polysonicblack_1000_175"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Sort",
              "description": "Sort the results by the given field. Should be a comma-separate string with \"field:direction\" items.",
              "type": "string",
              "nullable": true
            },
            "description": "Sort the results by the given field. Should be a comma-separate string with \"field:direction\" items.",
            "example": "vendor.name:asc,spool_weight:desc"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Limit",
              "description": "Maximum number of items in the response.",
              "type": "integer",
              "nullable": true
            },
            "description": "Maximum number of items in the response."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Offset",
              "description": "Offset in the full result set if a limit is set.",
              "default": 0
            },
            "description": "Offset in the full result set if a limit is set."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Filament"
                  },
                  "title": "Response 200 Find Filaments Filament Get"
                }
              }
            }
          },
          "299": {
            "description": "Websocket message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilamentEvent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "filament"
        ],
        "summary": "Add Filament",
        "description": "Add a new filament to the database.",
        "operationId": "Add_filament_filament_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilamentParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filament"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/filament/{filament_id}": {
      "get": {
        "tags": [
          "filament"
        ],
        "summary": "Get Filament",
        "description": "Get a specific filament. A websocket is served on the same path to listen for changes to the filament. See the HTTP Response code 299 for the content of the websocket messages.",
        "operationId": "Get_filament_filament__filament_id__get",
        "parameters": [
          {
            "name": "filament_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Filament Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filament"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "299": {
            "description": "Websocket message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilamentEvent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "filament"
        ],
        "summary": "Update Filament",
        "description": "Update any attribute of a filament. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.",
        "operationId": "Update_filament_filament__filament_id__patch",
        "parameters": [
          {
            "name": "filament_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Filament Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilamentUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filament"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "filament"
        ],
        "summary": "Delete Filament",
        "description": "Delete a filament.",
        "operationId": "Delete_filament_filament__filament_id__delete",
        "parameters": [
          {
            "name": "filament_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Filament Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/spool": {
      "get": {
        "tags": [
          "spool"
        ],
        "summary": "Find Spool",
        "description": "Get a list of spools that matches the search query. A websocket is served on the same path to listen for updates to any spool, or added or deleted spools. See the HTTP Response code 299 for the content of the websocket messages.",
        "operationId": "Find_spool_spool_get",
        "parameters": [
          {
            "name": "filament_name",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Filament Name",
              "description": "See filament.name.",
              "deprecated": true,
              "type": "string",
              "nullable": true
            },
            "description": "See filament.name.",
            "deprecated": true
          },
          {
            "name": "filament_id",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Filament ID",
              "description": "See filament.id.",
              "deprecated": true,
              "type": "string",
              "pattern": "^-?\\d+(,-?\\d+)*$",
              "nullable": true
            },
            "description": "See filament.id.",
            "deprecated": true
          },
          {
            "name": "filament_material",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Filament Material",
              "description": "See filament.material.",
              "deprecated": true,
              "type": "string",
              "nullable": true
            },
            "description": "See filament.material.",
            "deprecated": true
          },
          {
            "name": "vendor_name",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Vendor Name",
              "description": "See filament.vendor.name.",
              "deprecated": true,
              "type": "string",
              "nullable": true
            },
            "description": "See filament.vendor.name.",
            "deprecated": true
          },
          {
            "name": "vendor_id",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Vendor ID",
              "description": "See filament.vendor.id.",
              "deprecated": true,
              "type": "string",
              "pattern": "^-?\\d+(,-?\\d+)*$",
              "nullable": true
            },
            "description": "See filament.vendor.id.",
            "deprecated": true
          },
          {
            "name": "filament_dot_name",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Filament Name",
              "description": "Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match spools with no filament name. Surround a term with quotes to search for the exact term.",
              "type": "string",
              "nullable": true
            },
            "description": "Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match spools with no filament name. Surround a term with quotes to search for the exact term."
          },
          {
            "name": "filament_dot_id",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Filament ID",
              "description": "Match an exact filament ID. Separate multiple IDs with a comma.",
              "examples": [
                "1",
                "1,2"
              ],
              "type": "string",
              "pattern": "^-?\\d+(,-?\\d+)*$",
              "nullable": true
            },
            "description": "Match an exact filament ID. Separate multiple IDs with a comma."
          },
          {
            "name": "filament_dot_material",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Filament Material",
              "description": "Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match spools with no filament material. Surround a term with quotes to search for the exact term.",
              "type": "string",
              "nullable": true
            },
            "description": "Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match spools with no filament material. Surround a term with quotes to search for the exact term."
          },
          {
            "name": "filament_dot_vendor_dot_name",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Vendor Name",
              "description": "Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match spools with no vendor name. Surround a term with quotes to search for the exact term.",
              "type": "string",
              "nullable": true
            },
            "description": "Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match spools with no vendor name. Surround a term with quotes to search for the exact term."
          },
          {
            "name": "filament_dot_vendor_dot_id",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Vendor ID",
              "description": "Match an exact vendor ID. Separate multiple IDs with a comma. Set it to -1 to match spools with filaments with no vendor.",
              "examples": [
                "1",
                "1,2"
              ],
              "type": "string",
              "pattern": "^-?\\d+(,-?\\d+)*$",
              "nullable": true
            },
            "description": "Match an exact vendor ID. Separate multiple IDs with a comma. Set it to -1 to match spools with filaments with no vendor."
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Location",
              "description": "Partial case-insensitive search term for the spool location. Separate multiple terms with a comma. Specify an empty string to match spools with no location. Surround a term with quotes to search for the exact term.",
              "type": "string",
              "nullable": true
            },
            "description": "Partial case-insensitive search term for the spool location. Separate multiple terms with a comma. Specify an empty string to match spools with no location. Surround a term with quotes to search for the exact term."
          },
          {
            "name": "lot_nr",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Lot/Batch Number",
              "description": "Partial case-insensitive search term for the spool lot number. Separate multiple terms with a comma. Specify an empty string to match spools with no lot nr. Surround a term with quotes to search for the exact term.",
              "type": "string",
              "nullable": true
            },
            "description": "Partial case-insensitive search term for the spool lot number. Separate multiple terms with a comma. Specify an empty string to match spools with no lot nr. Surround a term with quotes to search for the exact term."
          },
          {
            "name": "allow_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Allow Archived",
              "description": "Whether to include archived spools in the search results.",
              "default": false
            },
            "description": "Whether to include archived spools in the search results."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Sort",
              "description": "Sort the results by the given field. Should be a comma-separate string with \"field:direction\" items.",
              "type": "string",
              "nullable": true
            },
            "description": "Sort the results by the given field. Should be a comma-separate string with \"field:direction\" items.",
            "example": "filament.name:asc,filament.vendor.id:asc,location:desc"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Limit",
              "description": "Maximum number of items in the response.",
              "type": "integer",
              "nullable": true
            },
            "description": "Maximum number of items in the response."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Offset",
              "description": "Offset in the full result set if a limit is set.",
              "default": 0
            },
            "description": "Offset in the full result set if a limit is set."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Spool"
                  },
                  "title": "Response 200 Find Spool Spool Get"
                }
              }
            }
          },
          "299": {
            "description": "Websocket message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpoolEvent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "spool"
        ],
        "summary": "Add Spool",
        "description": "Add a new spool to the database. Only specify either remaining_weight or used_weight. If no weight is set, the spool will be assumed to be full.",
        "operationId": "Add_spool_spool_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpoolParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Spool"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/spool/{spool_id}": {
      "get": {
        "tags": [
          "spool"
        ],
        "summary": "Get Spool",
        "description": "Get a specific spool. A websocket is served on the same path to listen for changes to the spool. See the HTTP Response code 299 for the content of the websocket messages.",
        "operationId": "Get_spool_spool__spool_id__get",
        "parameters": [
          {
            "name": "spool_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Spool Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Spool"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "299": {
            "description": "Websocket message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpoolEvent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "spool"
        ],
        "summary": "Update Spool",
        "description": "Update any attribute of a spool. Only fields specified in the request will be affected. remaining_weight and used_weight can't be set at the same time. If extra is set, all existing extra fields will be removed and replaced with the new ones.",
        "operationId": "Update_spool_spool__spool_id__patch",
        "parameters": [
          {
            "name": "spool_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Spool Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpoolUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Spool"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "spool"
        ],
        "summary": "Delete Spool",
        "description": "Delete a spool.",
        "operationId": "Delete_spool_spool__spool_id__delete",
        "parameters": [
          {
            "name": "spool_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Spool Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/spool/{spool_id}/use": {
      "put": {
        "tags": [
          "spool"
        ],
        "summary": "Use Spool Filament",
        "description": "Use some length or weight of filament from the spool. Specify either a length or a weight, not both.",
        "operationId": "Use_spool_filament_spool__spool_id__use_put",
        "parameters": [
          {
            "name": "spool_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Spool Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpoolUseParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Spool"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/spool/{spool_id}/measure": {
      "put": {
        "tags": [
          "spool"
        ],
        "summary": "Use Spool Filament Based On The Current Weight Measurement",
        "description": "Use some weight of filament from the spool. Specify the current gross weight of the spool.",
        "operationId": "Use_spool_filament_based_on_the_current_weight_measurement_spool__spool_id__measure_put",
        "parameters": [
          {
            "name": "spool_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Spool Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpoolMeasureParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Spool"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor": {
      "get": {
        "tags": [
          "vendor"
        ],
        "summary": "Find Vendor",
        "description": "Get a list of vendors that matches the search query. A websocket is served on the same path to listen for updates to any vendor, or added or deleted vendors. See the HTTP Response code 299 for the content of the websocket messages.",
        "operationId": "Find_vendor_vendor_get",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Vendor Name",
              "description": "Partial case-insensitive search term for the vendor name. Separate multiple terms with a comma. Surround a term with quotes to search for the exact term.",
              "type": "string",
              "nullable": true
            },
            "description": "Partial case-insensitive search term for the vendor name. Separate multiple terms with a comma. Surround a term with quotes to search for the exact term."
          },
          {
            "name": "external_id",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Vendor External ID",
              "description": "Exact match for the vendor external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term.",
              "type": "string",
              "nullable": true
            },
            "description": "Exact match for the vendor external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Sort",
              "description": "Sort the results by the given field. Should be a comma-separate string with \"field:direction\" items.",
              "type": "string",
              "nullable": true
            },
            "description": "Sort the results by the given field. Should be a comma-separate string with \"field:direction\" items.",
            "example": "name:asc,id:desc"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Limit",
              "description": "Maximum number of items in the response.",
              "type": "integer",
              "nullable": true
            },
            "description": "Maximum number of items in the response."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Offset",
              "description": "Offset in the full result set if a limit is set.",
              "default": 0
            },
            "description": "Offset in the full result set if a limit is set."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vendor"
                  },
                  "title": "Response 200 Find Vendor Vendor Get"
                }
              }
            }
          },
          "299": {
            "description": "Websocket message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorEvent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vendor"
        ],
        "summary": "Add Vendor",
        "description": "Add a new vendor to the database.",
        "operationId": "Add_vendor_vendor_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/{vendor_id}": {
      "get": {
        "tags": [
          "vendor"
        ],
        "summary": "Get Vendor",
        "description": "Get a specific vendor. A websocket is served on the same path to listen for changes to the vendor. See the HTTP Response code 299 for the content of the websocket messages.",
        "operationId": "Get_vendor_vendor__vendor_id__get",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "299": {
            "description": "Websocket message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorEvent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "vendor"
        ],
        "summary": "Update Vendor",
        "description": "Update any attribute of a vendor. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.",
        "operationId": "Update_vendor_vendor__vendor_id__patch",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "vendor"
        ],
        "summary": "Delete Vendor",
        "description": "Delete a vendor. The vendor attribute of any filaments who refer to the deleted vendor will be cleared.",
        "operationId": "Delete_vendor_vendor__vendor_id__delete",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/setting/{key}": {
      "get": {
        "tags": [
          "setting"
        ],
        "summary": "Get Setting",
        "description": "Get a specific setting. If the setting has not been set, the default value will be returned.A websocket is served on the same path to listen for changes to the setting. See the HTTP Response code 299 for the content of the websocket messages.",
        "operationId": "Get_setting_setting__key__get",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingResponse"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "299": {
            "description": "Websocket message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingEvent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "setting"
        ],
        "summary": "Set Setting",
        "description": "Set the value of a setting. The body must match the JSON type of the setting. An empty body or a body containing only 'null' will reset the setting to its default value. The new value will be returned.",
        "operationId": "Set_setting_setting__key__post",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingResponse"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/setting/": {
      "get": {
        "tags": [
          "setting"
        ],
        "summary": "Get All Settings",
        "description": "Get all settings, set or not. If the setting has not been set, 'value' will be the default value.",
        "operationId": "Get_all_settings_setting__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingResponse"
                  },
                  "type": "object",
                  "title": "Response Get All Settings Setting  Get"
                }
              }
            }
          }
        }
      }
    },
    "/field/{entity_type}": {
      "get": {
        "tags": [
          "field"
        ],
        "summary": "Get Extra Fields",
        "description": "Get all extra fields for a specific entity type.",
        "operationId": "Get_extra_fields_field__entity_type__get",
        "parameters": [
          {
            "name": "entity_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType",
              "description": "Entity type this field is for"
            },
            "description": "Entity type this field is for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtraField"
                  },
                  "title": "Response Get Extra Fields Field  Entity Type  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/field/{entity_type}/{key}": {
      "post": {
        "tags": [
          "field"
        ],
        "summary": "Add Or Update Extra Field",
        "description": "Add or update an extra field for a specific entity type. Returns the full list of extra fields for the entity type.",
        "operationId": "Add_or_update_extra_field_field__entity_type___key__post",
        "parameters": [
          {
            "name": "entity_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType",
              "description": "Entity type this field is for"
            },
            "description": "Entity type this field is for"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 64,
              "pattern": "^[a-z0-9_]+$",
              "title": "Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtraFieldParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtraField"
                  },
                  "title": "Response Add Or Update Extra Field Field  Entity Type   Key  Post"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "field"
        ],
        "summary": "Delete Extra Field",
        "description": "Delete an extra field for a specific entity type. Returns the full list of extra fields for the entity type.",
        "operationId": "Delete_extra_field_field__entity_type___key__delete",
        "parameters": [
          {
            "name": "entity_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType",
              "description": "Entity type this field is for"
            },
            "description": "Entity type this field is for"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 64,
              "pattern": "^[a-z0-9_]+$",
              "title": "Key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtraField"
                  },
                  "title": "Response Delete Extra Field Field  Entity Type   Key  Delete"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/material": {
      "get": {
        "tags": [
          "other"
        ],
        "summary": "Find Materials",
        "description": "Get a list of all filament materials.",
        "operationId": "Find_materials_material_get",
        "responses": {
          "200": {
            "description": "A list of all filament materials.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Response Find Materials Material Get"
                },
                "example": [
                  "PLA",
                  "ABS",
                  "PETG"
                ]
              }
            }
          }
        }
      }
    },
    "/article-number": {
      "get": {
        "tags": [
          "other"
        ],
        "summary": "Find Article Numbers",
        "description": "Get a list of all article numbers.",
        "operationId": "Find_article_numbers_article_number_get",
        "responses": {
          "200": {
            "description": "A list of all article numbers.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Response Find Article Numbers Article Number Get"
                },
                "example": [
                  "123456",
                  "987654"
                ]
              }
            }
          }
        }
      }
    },
    "/lot-number": {
      "get": {
        "tags": [
          "other"
        ],
        "summary": "Find Lot Numbers",
        "description": "Get a list of all lot numbers.",
        "operationId": "Find_lot_numbers_lot_number_get",
        "responses": {
          "200": {
            "description": "A list of all lot numbers.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Response Find Lot Numbers Lot Number Get"
                },
                "example": [
                  "123456",
                  "987654"
                ]
              }
            }
          }
        }
      }
    },
    "/location": {
      "get": {
        "tags": [
          "other"
        ],
        "summary": "Find Locations",
        "description": "Get a list of all spool locations.",
        "operationId": "Find_locations_location_get",
        "responses": {
          "200": {
            "description": "A list of all spool locations.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Response Find Locations Location Get"
                },
                "example": [
                  "Printer 1",
                  "Printer 2",
                  "Storage Shelf A"
                ]
              }
            }
          }
        }
      }
    },
    "/location/{location}": {
      "patch": {
        "tags": [
          "other"
        ],
        "summary": "Rename Location",
        "description": "Rename a spool location. All spools in this location will be moved to the new location.",
        "operationId": "Rename_location_location__location__patch",
        "parameters": [
          {
            "name": "location",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Location"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameLocationBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootModel_str_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/external/filament": {
      "get": {
        "tags": [
          "external"
        ],
        "summary": "Get All External Filaments",
        "description": "Get all external filaments.",
        "operationId": "Get_all_external_filaments_external_filament_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ExternalFilament"
                  },
                  "type": "array",
                  "title": "Response Get All External Filaments External Filament Get"
                }
              }
            }
          }
        }
      }
    },
    "/external/material": {
      "get": {
        "tags": [
          "external"
        ],
        "summary": "Get All External Materials",
        "description": "Get all external materials.",
        "operationId": "Get_all_external_materials_external_material_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ExternalMaterial"
                  },
                  "type": "array",
                  "title": "Response Get All External Materials External Material Get"
                }
              }
            }
          }
        }
      }
    },
    "/export/spools": {
      "get": {
        "tags": [
          "export"
        ],
        "summary": "Export Spools",
        "description": "Export the list of spools in various formats. Filament and vendor data is included.",
        "operationId": "Export_spools_export_spools_get",
        "parameters": [
          {
            "name": "fmt",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/export/filaments": {
      "get": {
        "tags": [
          "export"
        ],
        "summary": "Export Filaments",
        "description": "Export the list of filaments in various formats. Vendor data is included.",
        "operationId": "Export_filaments_export_filaments_get",
        "parameters": [
          {
            "name": "fmt",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/export/vendors": {
      "get": {
        "tags": [
          "export"
        ],
        "summary": "Export Vendors",
        "description": "Export the list of vendors in various formats.",
        "operationId": "Export_vendors_export_vendors_get",
        "parameters": [
          {
            "name": "fmt",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BackupResponse": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Path",
            "description": "Path to the created backup file.",
            "examples": [
              "/home/app/.local/share/spoolman/backups/spoolman.db"
            ]
          }
        },
        "type": "object",
        "title": "BackupResponse"
      },
      "EntityType": {
        "type": "string",
        "enum": [
          "vendor",
          "filament",
          "spool"
        ],
        "title": "EntityType"
      },
      "EventType": {
        "type": "string",
        "enum": [
          "added",
          "updated",
          "deleted"
        ],
        "title": "EventType",
        "description": "Event types."
      },
      "ExportFormat": {
        "type": "string",
        "enum": [
          "csv",
          "json"
        ],
        "title": "ExportFormat"
      },
      "ExternalFilament": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "A unique ID for this filament.",
            "examples": [
              "polymaker_pla_polysonicblack_1000_175"
            ]
          },
          "manufacturer": {
            "type": "string",
            "title": "Manufacturer",
            "description": "Filament manufacturer.",
            "examples": [
              "Polymaker"
            ]
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Filament name.",
            "examples": [
              "Polysonic\u2122 Black"
            ]
          },
          "material": {
            "type": "string",
            "title": "Material",
            "description": "Filament material.",
            "examples": [
              "PLA"
            ]
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in g/cm3.",
            "examples": [
              1.23
            ]
          },
          "weight": {
            "type": "number",
            "title": "Weight",
            "description": "Net weight of a single spool.",
            "examples": [
              1000
            ]
          },
          "spool_weight": {
            "title": "Spool Weight",
            "description": "Weight of an empty spool.",
            "examples": [
              140
            ],
            "type": "number",
            "nullable": true
          },
          "spool_type": {
            "description": "Type of spool.",
            "examples": [
              "plastic"
            ],
            "$ref": "#/components/schemas/SpoolType",
            "nullable": true
          },
          "diameter": {
            "type": "number",
            "title": "Diameter",
            "description": "Filament in mm.",
            "examples": [
              1.75
            ]
          },
          "color_hex": {
            "title": "Color Hex",
            "description": "Filament color code in hex format, for single-color filaments.",
            "examples": [
              "2c3232"
            ],
            "type": "string",
            "nullable": true
          },
          "color_hexes": {
            "title": "Color Hexes",
            "description": "For multi-color filaments. List of hex color codes in hex format.",
            "examples": [
              [
                "2c3232",
                "5f5f5f"
              ]
            ],
            "items": {
              "type": "string"
            },
            "type": "array",
            "nullable": true
          },
          "extruder_temp": {
            "title": "Extruder Temp",
            "description": "Extruder/nozzle temperature in \u00b0C.",
            "examples": [
              210
            ],
            "type": "integer",
            "nullable": true
          },
          "bed_temp": {
            "title": "Bed Temp",
            "description": "Bed temperature in \u00b0C.",
            "examples": [
              50
            ],
            "type": "integer",
            "nullable": true
          },
          "finish": {
            "description": "Finish of the filament.",
            "examples": [
              "matte"
            ],
            "$ref": "#/components/schemas/Finish",
            "nullable": true
          },
          "multi_color_direction": {
            "description": "Direction of multi-color filaments.",
            "examples": [
              "coaxial"
            ],
            "$ref": "#/components/schemas/spoolman__externaldb__MultiColorDirection",
            "nullable": true
          },
          "pattern": {
            "description": "Pattern of the filament.",
            "examples": [
              "marble"
            ],
            "$ref": "#/components/schemas/Pattern",
            "nullable": true
          },
          "translucent": {
            "type": "boolean",
            "title": "Translucent",
            "description": "Whether the filament is translucent.",
            "default": false
          },
          "glow": {
            "type": "boolean",
            "title": "Glow",
            "description": "Whether the filament is glow-in-the-dark.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "id",
          "manufacturer",
          "name",
          "material",
          "density",
          "weight",
          "diameter"
        ],
        "title": "ExternalFilament"
      },
      "ExternalMaterial": {
        "properties": {
          "material": {
            "type": "string",
            "title": "Material",
            "examples": [
              "PLA"
            ]
          },
          "density": {
            "type": "number",
            "title": "Density",
            "examples": [
              1.24
            ]
          },
          "extruder_temp": {
            "title": "Extruder Temp",
            "description": "Extruder/nozzle temperature in \u00b0C.",
            "examples": [
              210
            ],
            "type": "integer",
            "nullable": true
          },
          "bed_temp": {
            "title": "Bed Temp",
            "description": "Bed temperature in \u00b0C.",
            "examples": [
              50
            ],
            "type": "integer",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "material",
          "density"
        ],
        "title": "ExternalMaterial"
      },
      "ExtraField": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Name",
            "description": "Nice name"
          },
          "order": {
            "type": "integer",
            "title": "Order",
            "description": "Order of the field",
            "default": 0
          },
          "unit": {
            "title": "Unit",
            "description": "Unit of the value",
            "type": "string",
            "maxLength": 16,
            "minLength": 1,
            "nullable": true
          },
          "field_type": {
            "$ref": "#/components/schemas/ExtraFieldType",
            "description": "Type of the field"
          },
          "default_value": {
            "title": "Default Value",
            "description": "Default value of the field",
            "type": "string",
            "nullable": true
          },
          "choices": {
            "title": "Choices",
            "description": "Choices for the field, only for field type choice",
            "items": {
              "type": "string"
            },
            "type": "array",
            "minItems": 1,
            "nullable": true
          },
          "multi_choice": {
            "title": "Multi Choice",
            "description": "Whether multiple choices can be selected",
            "type": "boolean",
            "nullable": true
          },
          "key": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-z0-9_]+$",
            "title": "Key",
            "description": "Unique key"
          },
          "entity_type": {
            "$ref": "#/components/schemas/EntityType",
            "description": "Entity type this field is for"
          }
        },
        "type": "object",
        "required": [
          "name",
          "field_type",
          "key",
          "entity_type"
        ],
        "title": "ExtraField"
      },
      "ExtraFieldParameters": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Name",
            "description": "Nice name"
          },
          "order": {
            "type": "integer",
            "title": "Order",
            "description": "Order of the field",
            "default": 0
          },
          "unit": {
            "title": "Unit",
            "description": "Unit of the value",
            "type": "string",
            "maxLength": 16,
            "minLength": 1,
            "nullable": true
          },
          "field_type": {
            "$ref": "#/components/schemas/ExtraFieldType",
            "description": "Type of the field"
          },
          "default_value": {
            "title": "Default Value",
            "description": "Default value of the field",
            "type": "string",
            "nullable": true
          },
          "choices": {
            "title": "Choices",
            "description": "Choices for the field, only for field type choice",
            "items": {
              "type": "string"
            },
            "type": "array",
            "minItems": 1,
            "nullable": true
          },
          "multi_choice": {
            "title": "Multi Choice",
            "description": "Whether multiple choices can be selected",
            "type": "boolean",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "name",
          "field_type"
        ],
        "title": "ExtraFieldParameters"
      },
      "ExtraFieldType": {
        "type": "string",
        "enum": [
          "text",
          "integer",
          "integer_range",
          "float",
          "float_range",
          "datetime",
          "boolean",
          "choice"
        ],
        "title": "ExtraFieldType"
      },
      "Filament": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "Unique internal ID of this filament type."
          },
          "registered": {
            "type": "string",
            "title": "Registered",
            "description": "When the filament was registered in the database. UTC Timezone."
          },
          "name": {
            "title": "Name",
            "description": "Filament name, to distinguish this filament type among others from the same vendor.Should contain its color for example.",
            "examples": [
              "PolyTerra\u2122 Charcoal Black"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "vendor": {
            "description": "The vendor of this filament type.",
            "$ref": "#/components/schemas/Vendor",
            "nullable": true
          },
          "material": {
            "title": "Material",
            "description": "The material of this filament, e.g. PLA.",
            "examples": [
              "PLA"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "price": {
            "title": "Price",
            "description": "The price of this filament in the system configured currency.",
            "examples": [
              20.0
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "density": {
            "type": "number",
            "exclusiveMinimum": true,
            "title": "Density",
            "description": "The density of this filament in g/cm3.",
            "examples": [
              1.24
            ],
            "minimum": 0.0
          },
          "diameter": {
            "type": "number",
            "exclusiveMinimum": true,
            "title": "Diameter",
            "description": "The diameter of this filament in mm.",
            "examples": [
              1.75
            ],
            "minimum": 0.0
          },
          "weight": {
            "title": "Weight",
            "description": "The weight of the filament in a full spool, in grams.",
            "examples": [
              1000
            ],
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0.0,
            "nullable": true
          },
          "spool_weight": {
            "title": "Spool Weight",
            "description": "The empty spool weight, in grams.",
            "examples": [
              140
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "article_number": {
            "title": "Article Number",
            "description": "Vendor article number, e.g. EAN, QR code, etc.",
            "examples": [
              "PM70820"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "comment": {
            "title": "Comment",
            "description": "Free text comment about this filament type.",
            "examples": [
              ""
            ],
            "type": "string",
            "maxLength": 1024,
            "nullable": true
          },
          "settings_extruder_temp": {
            "title": "Settings Extruder Temp",
            "description": "Overridden extruder temperature, in \u00b0C.",
            "examples": [
              210
            ],
            "type": "integer",
            "minimum": 0.0,
            "nullable": true
          },
          "settings_bed_temp": {
            "title": "Settings Bed Temp",
            "description": "Overridden bed temperature, in \u00b0C.",
            "examples": [
              60
            ],
            "type": "integer",
            "minimum": 0.0,
            "nullable": true
          },
          "color_hex": {
            "title": "Color Hex",
            "description": "Hexadecimal color code of the filament, e.g. FF0000 for red. Supports alpha channel at the end. If it's a multi-color filament, the multi_color_hexes field is used instead.",
            "examples": [
              "FF0000"
            ],
            "type": "string",
            "maxLength": 8,
            "minLength": 6,
            "nullable": true
          },
          "multi_color_hexes": {
            "title": "Multi Color Hexes",
            "description": "Hexadecimal color code of the filament, e.g. FF0000 for red. Supports alpha channel at the end. Specifying multiple colors separated by commas. Also set the multi_color_direction field if you specify multiple colors.",
            "examples": [
              "FF0000,00FF00,0000FF"
            ],
            "type": "string",
            "minLength": 6,
            "nullable": true
          },
          "multi_color_direction": {
            "description": "Type of multi-color filament. Only set if the multi_color_hexes field is set.",
            "examples": [
              "coaxial",
              "longitudinal"
            ],
            "$ref": "#/components/schemas/spoolman__api__v1__models__MultiColorDirection",
            "nullable": true
          },
          "external_id": {
            "title": "External Id",
            "description": "Set if this filament comes from an external database. This contains the ID in the external database.",
            "examples": [
              "polymaker_pla_polysonicblack_1000_175"
            ],
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "extra": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Extra",
            "description": "Extra fields for this filament. All values are JSON-encoded data. Query the /fields endpoint for more details about the fields."
          }
        },
        "type": "object",
        "required": [
          "id",
          "registered",
          "density",
          "diameter",
          "extra"
        ],
        "title": "Filament"
      },
      "FilamentEvent": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EventType",
            "description": "Event type."
          },
          "resource": {
            "type": "string",
            "const": "filament",
            "title": "Resource",
            "description": "Resource type."
          },
          "date": {
            "type": "string",
            "title": "Date",
            "description": "When the event occured. UTC Timezone."
          },
          "payload": {
            "$ref": "#/components/schemas/Filament",
            "description": "Updated filament."
          }
        },
        "type": "object",
        "required": [
          "type",
          "resource",
          "date",
          "payload"
        ],
        "title": "FilamentEvent",
        "description": "Event."
      },
      "FilamentParameters": {
        "properties": {
          "name": {
            "title": "Name",
            "description": "Filament name, to distinguish this filament type among others from the same vendor.Should contain its color for example.",
            "examples": [
              "PolyTerra\u2122 Charcoal Black"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "vendor_id": {
            "title": "Vendor Id",
            "description": "The ID of the vendor of this filament type.",
            "type": "integer",
            "nullable": true
          },
          "material": {
            "title": "Material",
            "description": "The material of this filament, e.g. PLA.",
            "examples": [
              "PLA"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "price": {
            "title": "Price",
            "description": "The price of this filament in the system configured currency.",
            "examples": [
              20.0
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "density": {
            "type": "number",
            "exclusiveMinimum": true,
            "title": "Density",
            "description": "The density of this filament in g/cm3.",
            "examples": [
              1.24
            ],
            "minimum": 0.0
          },
          "diameter": {
            "type": "number",
            "exclusiveMinimum": true,
            "title": "Diameter",
            "description": "The diameter of this filament in mm.",
            "examples": [
              1.75
            ],
            "minimum": 0.0
          },
          "weight": {
            "title": "Weight",
            "description": "The weight of the filament in a full spool, in grams. (net weight)",
            "examples": [
              1000
            ],
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0.0,
            "nullable": true
          },
          "spool_weight": {
            "title": "Spool Weight",
            "description": "The empty spool weight, in grams.",
            "examples": [
              140
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "article_number": {
            "title": "Article Number",
            "description": "Vendor article number, e.g. EAN, QR code, etc.",
            "examples": [
              "PM70820"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "comment": {
            "title": "Comment",
            "description": "Free text comment about this filament type.",
            "examples": [
              ""
            ],
            "type": "string",
            "maxLength": 1024,
            "nullable": true
          },
          "settings_extruder_temp": {
            "title": "Settings Extruder Temp",
            "description": "Overridden extruder temperature, in \u00b0C.",
            "examples": [
              210
            ],
            "type": "integer",
            "minimum": 0.0,
            "nullable": true
          },
          "settings_bed_temp": {
            "title": "Settings Bed Temp",
            "description": "Overridden bed temperature, in \u00b0C.",
            "examples": [
              60
            ],
            "type": "integer",
            "minimum": 0.0,
            "nullable": true
          },
          "color_hex": {
            "title": "Color Hex",
            "description": "Hexadecimal color code of the filament, e.g. FF0000 for red. Supports alpha channel at the end. If it's a multi-color filament, the multi_color_hexes field is used instead.",
            "examples": [
              "FF0000"
            ],
            "type": "string",
            "nullable": true
          },
          "multi_color_hexes": {
            "title": "Multi Color Hexes",
            "description": "Hexadecimal color code of the filament, e.g. FF0000 for red. Supports alpha channel at the end. Specifying multiple colors separated by commas. Also set the multi_color_direction field if you specify multiple colors.",
            "examples": [
              "FF0000,00FF00,0000FF"
            ],
            "type": "string",
            "nullable": true
          },
          "multi_color_direction": {
            "description": "Type of multi-color filament. Only set if the color_hex field contains multiple colors. ",
            "examples": [
              "coaxial",
              "longitudinal"
            ],
            "$ref": "#/components/schemas/MultiColorDirection-Input",
            "nullable": true
          },
          "external_id": {
            "title": "External Id",
            "description": "Set if this filament comes from an external database. This contains the ID in the external database.",
            "examples": [
              "polymaker_pla_polysonicblack_1000_175"
            ],
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "extra": {
            "title": "Extra",
            "description": "Extra fields for this filament.",
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "density",
          "diameter"
        ],
        "title": "FilamentParameters"
      },
      "FilamentUpdateParameters": {
        "properties": {
          "name": {
            "title": "Name",
            "description": "Filament name, to distinguish this filament type among others from the same vendor.Should contain its color for example.",
            "examples": [
              "PolyTerra\u2122 Charcoal Black"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "vendor_id": {
            "title": "Vendor Id",
            "description": "The ID of the vendor of this filament type.",
            "type": "integer",
            "nullable": true
          },
          "material": {
            "title": "Material",
            "description": "The material of this filament, e.g. PLA.",
            "examples": [
              "PLA"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "price": {
            "title": "Price",
            "description": "The price of this filament in the system configured currency.",
            "examples": [
              20.0
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "density": {
            "title": "Density",
            "description": "The density of this filament in g/cm3.",
            "examples": [
              1.24
            ],
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0.0,
            "nullable": true
          },
          "diameter": {
            "title": "Diameter",
            "description": "The diameter of this filament in mm.",
            "examples": [
              1.75
            ],
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0.0,
            "nullable": true
          },
          "weight": {
            "title": "Weight",
            "description": "The weight of the filament in a full spool, in grams. (net weight)",
            "examples": [
              1000
            ],
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0.0,
            "nullable": true
          },
          "spool_weight": {
            "title": "Spool Weight",
            "description": "The empty spool weight, in grams.",
            "examples": [
              140
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "article_number": {
            "title": "Article Number",
            "description": "Vendor article number, e.g. EAN, QR code, etc.",
            "examples": [
              "PM70820"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "comment": {
            "title": "Comment",
            "description": "Free text comment about this filament type.",
            "examples": [
              ""
            ],
            "type": "string",
            "maxLength": 1024,
            "nullable": true
          },
          "settings_extruder_temp": {
            "title": "Settings Extruder Temp",
            "description": "Overridden extruder temperature, in \u00b0C.",
            "examples": [
              210
            ],
            "type": "integer",
            "minimum": 0.0,
            "nullable": true
          },
          "settings_bed_temp": {
            "title": "Settings Bed Temp",
            "description": "Overridden bed temperature, in \u00b0C.",
            "examples": [
              60
            ],
            "type": "integer",
            "minimum": 0.0,
            "nullable": true
          },
          "color_hex": {
            "title": "Color Hex",
            "description": "Hexadecimal color code of the filament, e.g. FF0000 for red. Supports alpha channel at the end. If it's a multi-color filament, the multi_color_hexes field is used instead.",
            "examples": [
              "FF0000"
            ],
            "type": "string",
            "nullable": true
          },
          "multi_color_hexes": {
            "title": "Multi Color Hexes",
            "description": "Hexadecimal color code of the filament, e.g. FF0000 for red. Supports alpha channel at the end. Specifying multiple colors separated by commas. Also set the multi_color_direction field if you specify multiple colors.",
            "examples": [
              "FF0000,00FF00,0000FF"
            ],
            "type": "string",
            "nullable": true
          },
          "multi_color_direction": {
            "description": "Type of multi-color filament. Only set if the color_hex field contains multiple colors. ",
            "examples": [
              "coaxial",
              "longitudinal"
            ],
            "$ref": "#/components/schemas/MultiColorDirection-Input",
            "nullable": true
          },
          "external_id": {
            "title": "External Id",
            "description": "Set if this filament comes from an external database. This contains the ID in the external database.",
            "examples": [
              "polymaker_pla_polysonicblack_1000_175"
            ],
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "extra": {
            "title": "Extra",
            "description": "Extra fields for this filament.",
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "nullable": true
          }
        },
        "type": "object",
        "title": "FilamentUpdateParameters"
      },
      "Finish": {
        "type": "string",
        "enum": [
          "matte",
          "glossy"
        ],
        "title": "Finish"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthCheck": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "examples": [
              "healthy"
            ]
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "HealthCheck"
      },
      "Info": {
        "properties": {
          "version": {
            "type": "string",
            "title": "Version",
            "examples": [
              "0.7.0"
            ]
          },
          "debug_mode": {
            "type": "boolean",
            "title": "Debug Mode",
            "examples": [
              false
            ]
          },
          "automatic_backups": {
            "type": "boolean",
            "title": "Automatic Backups",
            "examples": [
              true
            ]
          },
          "data_dir": {
            "type": "string",
            "title": "Data Dir",
            "examples": [
              "/home/app/.local/share/spoolman"
            ]
          },
          "logs_dir": {
            "type": "string",
            "title": "Logs Dir",
            "examples": [
              "/home/app/.local/share/spoolman"
            ]
          },
          "backups_dir": {
            "type": "string",
            "title": "Backups Dir",
            "examples": [
              "/home/app/.local/share/spoolman/backups"
            ]
          },
          "db_type": {
            "type": "string",
            "title": "Db Type",
            "examples": [
              "sqlite"
            ]
          },
          "git_commit": {
            "title": "Git Commit",
            "examples": [
              "a1b2c3d"
            ],
            "type": "string",
            "nullable": true
          },
          "build_date": {
            "title": "Build Date",
            "examples": [
              "2021-01-01T00:00:00Z"
            ],
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "version",
          "debug_mode",
          "automatic_backups",
          "data_dir",
          "logs_dir",
          "backups_dir",
          "db_type"
        ],
        "title": "Info"
      },
      "Message": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "Message"
      },
      "MultiColorDirection-Input": {
        "type": "string",
        "enum": [
          "coaxial",
          "longitudinal"
        ],
        "title": "MultiColorDirection",
        "description": "Enum for multi-color direction."
      },
      "Pattern": {
        "type": "string",
        "enum": [
          "marble",
          "sparkle"
        ],
        "title": "Pattern"
      },
      "RenameLocationBody": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "The new name of the location."
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "RenameLocationBody"
      },
      "RootModel_str_": {
        "type": "string",
        "title": "RootModel[str]"
      },
      "SettingEvent": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EventType",
            "description": "Event type."
          },
          "resource": {
            "type": "string",
            "const": "setting",
            "title": "Resource",
            "description": "Resource type."
          },
          "date": {
            "type": "string",
            "title": "Date",
            "description": "When the event occured. UTC Timezone."
          },
          "payload": {
            "$ref": "#/components/schemas/SettingKV",
            "description": "Updated setting."
          }
        },
        "type": "object",
        "required": [
          "type",
          "resource",
          "date",
          "payload"
        ],
        "title": "SettingEvent",
        "description": "Event."
      },
      "SettingKV": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key",
            "description": "Setting key."
          },
          "setting": {
            "$ref": "#/components/schemas/SettingResponse",
            "description": "Setting value."
          }
        },
        "type": "object",
        "required": [
          "key",
          "setting"
        ],
        "title": "SettingKV"
      },
      "SettingResponse": {
        "properties": {
          "value": {
            "type": "string",
            "title": "Value",
            "description": "Setting value."
          },
          "is_set": {
            "type": "boolean",
            "title": "Is Set",
            "description": "Whether the setting has been set. If false, 'value' contains the default value."
          },
          "type": {
            "$ref": "#/components/schemas/SettingType",
            "description": "Setting type. This corresponds with JSON types."
          }
        },
        "type": "object",
        "required": [
          "value",
          "is_set",
          "type"
        ],
        "title": "SettingResponse"
      },
      "SettingType": {
        "type": "string",
        "enum": [
          "boolean",
          "number",
          "string",
          "array",
          "object"
        ],
        "title": "SettingType",
        "description": "The type of a setting."
      },
      "Spool": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "Unique internal ID of this spool of filament."
          },
          "registered": {
            "type": "string",
            "title": "Registered",
            "description": "When the spool was registered in the database. UTC Timezone."
          },
          "first_used": {
            "title": "First Used",
            "description": "First logged occurence of spool usage. UTC Timezone.",
            "type": "string",
            "nullable": true
          },
          "last_used": {
            "title": "Last Used",
            "description": "Last logged occurence of spool usage. UTC Timezone.",
            "type": "string",
            "nullable": true
          },
          "filament": {
            "$ref": "#/components/schemas/Filament",
            "description": "The filament type of this spool."
          },
          "price": {
            "title": "Price",
            "description": "The price of this spool in the system configured currency.",
            "examples": [
              20.0
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "remaining_weight": {
            "title": "Remaining Weight",
            "description": "Estimated remaining weight of filament on the spool in grams. Only set if the filament type has a weight set.",
            "examples": [
              500.6
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "initial_weight": {
            "title": "Initial Weight",
            "description": "The initial weight, in grams, of the filament on the spool (net weight).",
            "examples": [
              1246
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "spool_weight": {
            "title": "Spool Weight",
            "description": "Weight of an empty spool (tare weight).",
            "examples": [
              246
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "used_weight": {
            "type": "number",
            "minimum": 0.0,
            "title": "Used Weight",
            "description": "Consumed weight of filament from the spool in grams.",
            "examples": [
              500.3
            ]
          },
          "remaining_length": {
            "title": "Remaining Length",
            "description": "Estimated remaining length of filament on the spool in millimeters. Only set if the filament type has a weight set.",
            "examples": [
              5612.4
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "used_length": {
            "type": "number",
            "minimum": 0.0,
            "title": "Used Length",
            "description": "Consumed length of filament from the spool in millimeters.",
            "examples": [
              50.7
            ]
          },
          "location": {
            "title": "Location",
            "description": "Where this spool can be found.",
            "examples": [
              "Shelf A"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "lot_nr": {
            "title": "Lot Nr",
            "description": "Vendor manufacturing lot/batch number of the spool.",
            "examples": [
              "52342"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "comment": {
            "title": "Comment",
            "description": "Free text comment about this specific spool.",
            "examples": [
              ""
            ],
            "type": "string",
            "maxLength": 1024,
            "nullable": true
          },
          "archived": {
            "type": "boolean",
            "title": "Archived",
            "description": "Whether this spool is archived and should not be used anymore."
          },
          "extra": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Extra",
            "description": "Extra fields for this spool. All values are JSON-encoded data. Query the /fields endpoint for more details about the fields."
          }
        },
        "type": "object",
        "required": [
          "id",
          "registered",
          "filament",
          "used_weight",
          "used_length",
          "archived",
          "extra"
        ],
        "title": "Spool"
      },
      "SpoolEvent": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EventType",
            "description": "Event type."
          },
          "resource": {
            "type": "string",
            "const": "spool",
            "title": "Resource",
            "description": "Resource type."
          },
          "date": {
            "type": "string",
            "title": "Date",
            "description": "When the event occured. UTC Timezone."
          },
          "payload": {
            "$ref": "#/components/schemas/Spool",
            "description": "Updated spool."
          }
        },
        "type": "object",
        "required": [
          "type",
          "resource",
          "date",
          "payload"
        ],
        "title": "SpoolEvent",
        "description": "Event."
      },
      "SpoolMeasureParameters": {
        "properties": {
          "weight": {
            "type": "number",
            "title": "Weight",
            "description": "Current gross weight of the spool, in g.",
            "examples": [
              200
            ]
          }
        },
        "type": "object",
        "required": [
          "weight"
        ],
        "title": "SpoolMeasureParameters"
      },
      "SpoolParameters": {
        "properties": {
          "first_used": {
            "title": "First Used",
            "description": "First logged occurence of spool usage.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "last_used": {
            "title": "Last Used",
            "description": "Last logged occurence of spool usage.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "filament_id": {
            "type": "integer",
            "title": "Filament Id",
            "description": "The ID of the filament type of this spool."
          },
          "price": {
            "title": "Price",
            "description": "The price of this filament in the system configured currency.",
            "examples": [
              20.0
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "initial_weight": {
            "title": "Initial Weight",
            "description": "The initial weight of the filament on the spool, in grams. (net weight)",
            "examples": [
              200
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "spool_weight": {
            "title": "Spool Weight",
            "description": "The weight of an empty spool, in grams. (tare weight)",
            "examples": [
              200
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "remaining_weight": {
            "title": "Remaining Weight",
            "description": "Remaining weight of filament on the spool. Can only be used if the filament type has a weight set.",
            "examples": [
              800
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "used_weight": {
            "title": "Used Weight",
            "description": "Used weight of filament on the spool.",
            "examples": [
              200
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "location": {
            "title": "Location",
            "description": "Where this spool can be found.",
            "examples": [
              "Shelf A"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "lot_nr": {
            "title": "Lot Nr",
            "description": "Vendor manufacturing lot/batch number of the spool.",
            "examples": [
              "52342"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "comment": {
            "title": "Comment",
            "description": "Free text comment about this specific spool.",
            "examples": [
              ""
            ],
            "type": "string",
            "maxLength": 1024,
            "nullable": true
          },
          "archived": {
            "type": "boolean",
            "title": "Archived",
            "description": "Whether this spool is archived and should not be used anymore.",
            "default": false
          },
          "extra": {
            "title": "Extra",
            "description": "Extra fields for this spool.",
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "filament_id"
        ],
        "title": "SpoolParameters"
      },
      "SpoolType": {
        "type": "string",
        "enum": [
          "plastic",
          "cardboard",
          "metal"
        ],
        "title": "SpoolType"
      },
      "SpoolUpdateParameters": {
        "properties": {
          "first_used": {
            "title": "First Used",
            "description": "First logged occurence of spool usage.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "last_used": {
            "title": "Last Used",
            "description": "Last logged occurence of spool usage.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "filament_id": {
            "title": "Filament Id",
            "description": "The ID of the filament type of this spool.",
            "type": "integer",
            "nullable": true
          },
          "price": {
            "title": "Price",
            "description": "The price of this filament in the system configured currency.",
            "examples": [
              20.0
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "initial_weight": {
            "title": "Initial Weight",
            "description": "The initial weight of the filament on the spool, in grams. (net weight)",
            "examples": [
              200
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "spool_weight": {
            "title": "Spool Weight",
            "description": "The weight of an empty spool, in grams. (tare weight)",
            "examples": [
              200
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "remaining_weight": {
            "title": "Remaining Weight",
            "description": "Remaining weight of filament on the spool. Can only be used if the filament type has a weight set.",
            "examples": [
              800
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "used_weight": {
            "title": "Used Weight",
            "description": "Used weight of filament on the spool.",
            "examples": [
              200
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "location": {
            "title": "Location",
            "description": "Where this spool can be found.",
            "examples": [
              "Shelf A"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "lot_nr": {
            "title": "Lot Nr",
            "description": "Vendor manufacturing lot/batch number of the spool.",
            "examples": [
              "52342"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "comment": {
            "title": "Comment",
            "description": "Free text comment about this specific spool.",
            "examples": [
              ""
            ],
            "type": "string",
            "maxLength": 1024,
            "nullable": true
          },
          "archived": {
            "type": "boolean",
            "title": "Archived",
            "description": "Whether this spool is archived and should not be used anymore.",
            "default": false
          },
          "extra": {
            "title": "Extra",
            "description": "Extra fields for this spool.",
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "nullable": true
          }
        },
        "type": "object",
        "title": "SpoolUpdateParameters"
      },
      "SpoolUseParameters": {
        "properties": {
          "use_length": {
            "title": "Use Length",
            "description": "Length of filament to reduce by, in mm.",
            "examples": [
              2.2
            ],
            "type": "number",
            "nullable": true
          },
          "use_weight": {
            "title": "Use Weight",
            "description": "Filament weight to reduce by, in g.",
            "examples": [
              5.3
            ],
            "type": "number",
            "nullable": true
          }
        },
        "type": "object",
        "title": "SpoolUseParameters"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "Vendor": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "Unique internal ID of this vendor."
          },
          "registered": {
            "type": "string",
            "title": "Registered",
            "description": "When the vendor was registered in the database. UTC Timezone."
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "title": "Name",
            "description": "Vendor name.",
            "examples": [
              "Polymaker"
            ]
          },
          "comment": {
            "title": "Comment",
            "description": "Free text comment about this vendor.",
            "examples": [
              ""
            ],
            "type": "string",
            "maxLength": 1024,
            "nullable": true
          },
          "empty_spool_weight": {
            "title": "Empty Spool Weight",
            "description": "The empty spool weight, in grams.",
            "examples": [
              140
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "external_id": {
            "title": "External Id",
            "description": "Set if this vendor comes from an external database. This contains the ID in the external database.",
            "examples": [
              "eSun"
            ],
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "extra": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Extra",
            "description": "Extra fields for this vendor. All values are JSON-encoded data. Query the /fields endpoint for more details about the fields."
          }
        },
        "type": "object",
        "required": [
          "id",
          "registered",
          "name",
          "extra"
        ],
        "title": "Vendor"
      },
      "VendorEvent": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EventType",
            "description": "Event type."
          },
          "resource": {
            "type": "string",
            "const": "vendor",
            "title": "Resource",
            "description": "Resource type."
          },
          "date": {
            "type": "string",
            "title": "Date",
            "description": "When the event occured. UTC Timezone."
          },
          "payload": {
            "$ref": "#/components/schemas/Vendor",
            "description": "Updated vendor."
          }
        },
        "type": "object",
        "required": [
          "type",
          "resource",
          "date",
          "payload"
        ],
        "title": "VendorEvent",
        "description": "Event."
      },
      "VendorParameters": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64,
            "title": "Name",
            "description": "Vendor name.",
            "examples": [
              "Polymaker"
            ]
          },
          "comment": {
            "title": "Comment",
            "description": "Free text comment about this vendor.",
            "examples": [
              ""
            ],
            "type": "string",
            "maxLength": 1024,
            "nullable": true
          },
          "empty_spool_weight": {
            "title": "Empty Spool Weight",
            "description": "The weight of an empty spool, in grams.",
            "examples": [
              200
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "external_id": {
            "title": "External Id",
            "description": "Set if this vendor comes from an external database. This contains the ID in the external database.",
            "examples": [
              "eSun"
            ],
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "extra": {
            "title": "Extra",
            "description": "Extra fields for this vendor.",
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "VendorParameters"
      },
      "VendorUpdateParameters": {
        "properties": {
          "name": {
            "title": "Name",
            "description": "Vendor name.",
            "examples": [
              "Polymaker"
            ],
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "comment": {
            "title": "Comment",
            "description": "Free text comment about this vendor.",
            "examples": [
              ""
            ],
            "type": "string",
            "maxLength": 1024,
            "nullable": true
          },
          "empty_spool_weight": {
            "title": "Empty Spool Weight",
            "description": "The weight of an empty spool, in grams.",
            "examples": [
              200
            ],
            "type": "number",
            "minimum": 0.0,
            "nullable": true
          },
          "external_id": {
            "title": "External Id",
            "description": "Set if this vendor comes from an external database. This contains the ID in the external database.",
            "examples": [
              "eSun"
            ],
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "extra": {
            "title": "Extra",
            "description": "Extra fields for this vendor.",
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "nullable": true
          }
        },
        "type": "object",
        "title": "VendorUpdateParameters"
      },
      "spoolman__api__v1__models__MultiColorDirection": {
        "type": "string",
        "enum": [
          "coaxial",
          "longitudinal"
        ],
        "title": "MultiColorDirection",
        "description": "Enum for multi-color direction."
      },
      "spoolman__externaldb__MultiColorDirection": {
        "type": "string",
        "enum": [
          "coaxial",
          "longitudinal"
        ],
        "title": "MultiColorDirection"
      }
    }
  }
}